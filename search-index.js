var searchIndex = {};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["assimp"] = {"doc":"assimp - Open Asset Import Library","items":[[3,"Animation","assimp","Animation type (not yet implemented)",null,null],[3,"NodeAnim","","NodeAnim type (not yet implemented)",null,null],[3,"VectorKey","","VectorKey type (not yet implemented)",null,null],[3,"QuatKey","","QuatKey type (not yet implemented)",null,null],[3,"Camera","","Camera type (not yet implemented)",null,null],[3,"Face","","Face type (not yet implemented)",null,null],[3,"Light","","Light type (not yet implemented)",null,null],[3,"Material","","Material type (not yet implemented)",null,null],[3,"Mesh","","Mesh type (incomplete)",null,null],[3,"Node","","The `Node` type represents a node in the imported scene hierarchy.",null,null],[3,"Scene","","The `Scene` type is the root container for all imported scene data.",null,null],[3,"Texture","","Texture type.",null,null],[0,"export","","The `export` module implements functionality for exporting scenes (not yet implemented).",null,null],[0,"import","","The `import` module contains functionality for importing scenes.",null,null],[3,"Importer","assimp::import","The `Importer` type.",null,null],[0,"structs","","Argument structs for `Importer` post-processing configuration.",null,null],[3,"CalcTangentSpace","assimp::import::structs","Arguments for `calc_tangent_space` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",0,null],[12,"max_smoothing_angle","","Maximum angle between two vertex tangents used for smoothing. Default: 45.0",0,null],[12,"texture_channel","","Source UV channel for tangent space computation. Default: 0",0,null],[3,"RemoveComponent","","Arguments for `remove_component` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",1,null],[12,"components","","Specify which components to remove. Default: none",1,null],[3,"GenerateNormals","","Arguments for `generate_normals` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",2,null],[12,"smooth","","Whether the generated normals are smoothed or not. Default: false",2,null],[12,"max_smoothing_angle","","Maximum angle between two vertex normals used for smoothing. Default: 175.0 Only applies if `smooth` is `true`.",2,null],[3,"SplitLargeMeshes","","Arguments for `split_large_meshes` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",3,null],[12,"vertex_limit","","Maximum number of vertices per mesh. Default: 1000000",3,null],[12,"triangle_limit","","Maximum number of triangles per mesh. Default: 1000000",3,null],[3,"PreTransformVertices","","Arguments for `pre_transform_vertices` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",4,null],[12,"keep_hierarchy","","Whether to keep the existing scene hierarchy. Default: false",4,null],[12,"normalize","","Whether to normalize all vertices into the [-1, 1] range. Default: false",4,null],[12,"add_root_transformation","","Whether to pre-transform all vertices using the matrix specified in the `root_transformation` field. Default: false",4,null],[12,"root_transformation","","Transformation matrix to use.",4,null],[3,"LimitBoneWeights","","Arguments for `limit_bone_weights` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",5,null],[12,"max_weights","","Maximum number of bones that affect a single vertex. Default: 4",5,null],[3,"ImproveCacheLocality","","Arguments for `improve_cache_locality` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",6,null],[12,"cache_size","","Set the size of the post-transform vertex cache. Default: 12",6,null],[3,"RemoveRedundantMaterials","","Arguments for `remove_redundant_materials` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",7,null],[12,"exclude_list","","Space-delimited list of materials to keep. Identifiers containing whitespace must be enclosed in single quotes. e.g. `material1 'material 2' material3`.",7,null],[3,"SortByPrimitiveType","","Arguments for `sort_by_primitive_type` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",8,null],[12,"remove","","List of primitive types to remove. Default: none",8,null],[3,"FindDegenerates","","Arguments for `find_degenerates` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",9,null],[12,"remove","","Whether to remove any found degenerates. Default: true",9,null],[3,"FindInvalidData","","Arguments for `find_invalid_data` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",10,null],[12,"accuracy","","Specify the accuracy for considering animation values as invalid. Default: 0",10,null],[3,"TransformUVCoords","","Arguments for `transform_uv_coords` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",11,null],[12,"flags","","Specify which UV transforms to evaluate. Default: all",11,null],[3,"OptimizeGraph","","Arguments for `optimize_graph` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",12,null],[12,"exclude_list","","Space-delimited list of nodes to keep. Identifiers containing whitespace must be enclosed in single quotes. e.g. `node1 'node 2' node3`.",12,null],[3,"SplitByBoneCount","","Arguments for `split_by_bone_count` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",13,null],[12,"max_bones","","Maximum number of bones per mesh. Default: 60",13,null],[3,"Debone","","Arguments for `debone` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",14,null],[12,"threshold","","Threshold for considering bone necessary. Default: 1.0",14,null],[12,"all_or_none","","Whether to require all bones to meet the threshold before removing any. Default: false",14,null],[4,"ComponentType","","Enumerates components of the Scene and Mesh data structures that can be excluded from the import using the `remove_component` step.",null,null],[13,"Normals","","",15,null],[13,"TangentsAndBitangents","","",15,null],[13,"Colors","","",15,null],[13,"TexCoords","","",15,null],[13,"BoneWeights","","",15,null],[13,"Animations","","",15,null],[13,"Textures","","",15,null],[13,"Lights","","",15,null],[13,"Cameras","","",15,null],[13,"Meshes","","",15,null],[13,"Materials","","",15,null],[4,"UVTransformFlag","","",null,null],[13,"Scaling","","",16,null],[13,"Rotation","","",16,null],[13,"Translation","","",16,null],[13,"All","","",16,null],[4,"PrimitiveType","","",null,null],[13,"Point","","",17,null],[13,"Line","","",17,null],[13,"Triangle","","",17,null],[13,"Polygon","","",17,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"componenttype"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"componenttype"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"uvtransformflag"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"uvtransformflag"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"calctangentspace"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"removecomponent"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"generatenormals"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"splitlargemeshes"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"pretransformvertices"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"limitboneweights"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"improvecachelocality"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"removeredundantmaterials"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"sortbyprimitivetype"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"finddegenerates"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"findinvaliddata"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"transformuvcoords"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"optimizegraph"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"splitbybonecount"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"debone"}}],[11,"new","assimp::import","Create a new Importer.",18,{"inputs":[],"output":{"name":"importer"}}],[11,"read_file","","Load a scene from the specified file.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"read_string","","Load a scene from a string.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"apply_postprocessing","","Apply post-processing to an already-imported scene.",18,{"inputs":[{"name":"self"},{"name":"scene"}],"output":{"name":"result"}}],[11,"measure_time","","Enables time measurements.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"favour_speed","","A hint to Assimp to favour speed against import quality.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"calc_tangent_space","","Calculates the tangents and bitangents for the imported meshes.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_identical_vertices","","Identifies and joins identical vertex data sets within all imported meshes.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"make_left_handed","","Converts all the imported data to a left-handed coordinate space.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"triangulate","","Triangulates all faces of all meshes.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"remove_component","","Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components).",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"generate_normals","","Generates normals for imported meshes.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"split_large_meshes","","Splits large meshes into smaller sub-meshes.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"pre_transform_vertices","","Removes the node graph and pre-transforms all vertices with the local transformation matrices of their nodes.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"limit_bone_weights","","Limits the number of bones simultaneously affecting a single vertex to a maximum value.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"validate_data_structure","","Validates the imported scene data structure.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"improve_cache_locality","","Reorders triangles for better vertex cache locality.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove_redudant_materials","","Searches for redundant/unreferenced materials and removes them.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fix_infacing_normals","","This step tries to determine which meshes have normal vectors that are facing inwards and inverts them.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"sort_by_primitive_type","","This step splits meshes with more than one primitive type in homogeneous sub-meshes.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"find_degenerates","","This step searches all meshes for degenerate primitives and converts them to proper lines or points.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"find_invalid_data","","This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coords and removes/fixes them. This is intended to get rid of some common exporter errors.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"gen_uv_coords","","This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"transform_uv_coords","","This step applies per-texture UV transformations and bakes them into stand-alone vtexture coordinate channels.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"find_instances","","This step searches for duplicate meshes and replaces them with references to the first mesh.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"optimize_meshes","","A postprocessing step to reduce the number of meshes.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"optimize_graph","","A postprocessing step to optimize the scene hierarchy.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flip_uvs","","This step flips all UV coordinates along the y-axis and adjusts material settings and bitangents accordingly.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"flip_winding_order","","This step adjusts the output face winding order to be CW.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"split_by_bone_count","","This step splits meshes with many bones into sub-meshes so that each submesh has fewer or as many bones as a given limit.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"debone","","This step removes bones losslessly or according to some threshold.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"import_no_skeleton_meshes","","Global setting to disable generation of skeleton dummy meshes",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"import_mdl_colormap","","Sets the colormap to be used to decode embedded textures in MDL (Quake or 3DGS) files.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fbx_read_all_geometry_layers","","Set whether the FBX importer will merge all geometry layers present in the source file or take only the first.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_all_materials","","Set whether the FBX importer will read all materials present in the source file or take only the referenced materials. This has no effect if `fbx_read_materials` is false.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_materials","","Set whether the FBX importer will read materials.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_textures","","Set whether the FBX importer will read embedded textures.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_cameras","","Set whether the FBX importer will read cameras.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_lights","","Set whether the FBX importer will read light sources.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_read_animations","","Set whether the FBX importer will read animations.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_strict_mode","","Set whether the FBX importer will act in strict mode in which only FBX 2013 is supported and any other sub formats are rejected. FBX 2013 is the primary target for the importer, so this format is best supported and well-tested.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_preserve_pivots","","Set whether the FBX importer will preserve pivot points for transformations (as extra nodes). If set to false, pivots and offsets will be evaluated whenever possible.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"fbx_optimize_empty_animation_curves","","Specifies whether the FBX importer will drop empty animation curves or animation curves which match the bind pose transformation over their entire defined range.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"global_keyframe","","Set the vertex animation keyframe to be imported",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"md3_keyframe","","Override `global_keyframe` property for the MD3 importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"md2_keyframe","","Override `global_keyframe` property for the MD2 importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mdl_keyframe","","Override `global_keyframe` property for the MDL importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mdc_keyframe","","Override `global_keyframe` property for the MDC importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"smd_keyframe","","Override `global_keyframe` property for the SMD importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"unreal_keyframe","","Override `global_keyframe` property for the Unreal importer.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"ac_separate_bf_cull","","Configures the AC importer to collect all surfaces which have the \"Backface cull\" flag set in separate meshes.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ac_eval_subdivision","","Configures whether the AC importer evaluates subdivision surfaces (indicated by the presence of the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using the standard Catmull-Clark algorithm.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"unreal_handle_flags","","Configures the Unreal importer to separate faces with different surface flags (e.g. two-sided vs. single-sided).",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ter_make_uvs","","Configures the terragen importer to compute UVs for terrains, if not given. Furthermore a default texture is assigned.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ase_reconstruct_normals","","Configures the ASE importer to always reconstruct normal vectors based on the smoothing groups loaded from the file.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"md3_handle_multipart","","Configures the MD3 importer to detect and process multi-part Quake player models.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"md3_skin_name","","Tells the MD3 importer which skin files to load.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"md3_shader_src","","Specify the Quake 3 shader file to be used for a particular MD3 file. This can also be a search path.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"lwo_one_layer_only_str","","Configures the LWO importer to load just one layer from the model.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"lwo_one_layer_only_int","","Configures the LWO importer to load just one layer from the model.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"md5_no_anim_autoload","","Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"lws_anim_start","","Defines the begin of the time range for which the LWS loader evaluates animations and computes aiNodeAnims.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"lws_anim_end","","Defines the end of the time range for which the LWS loader evaluates animations and computs aiNodeAnims. See `lws_anim_start` for more info.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"irr_anim_fps","","Defines the output frame rate of the IRR loader.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"ogre_material_file","","Ogre Importer will try to find referenced materials from this file.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"ogre_texture_type_from_filename","","Ogre Importer detect the texture usage from its filename.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ifc_skip_space_representations","","Specifies whether the IFC loader skips over IfcSpace elements.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ifc_skip_curve_representations","","Specifies whether the IFC loader skips over shape representations of type 'Curve2D'.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ifc_custom_triangulation","","Specifies whether the IFC loader will use its own, custom triangulation algorithm to triangulate wall and floor meshes.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"collada_ignore_up_direction","","Tells the Collada importer to ignore the up direction specified in the file.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_extension_list","","Get a list of all file extensions supported by Assimp.",18,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[0,"log","assimp","",null,null],[3,"LogStream","assimp::log","",null,null],[11,"file","","",19,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"stdout","","",19,{"inputs":[],"output":{"name":"logstream"}}],[11,"stderr","","",19,{"inputs":[],"output":{"name":"logstream"}}],[11,"callback","","",19,null],[11,"attached","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attach","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"detach","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"set_verbose_logging","","",19,{"inputs":[{"name":"bool"}],"output":null}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[0,"math","assimp","The `math` module contains definitions of primitive math types.",null,null],[0,"color3","assimp::math","",null,null],[3,"Color3D","assimp::math::color3","Color3D docs",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"color3d"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"color3d"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"color3d"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"aicolor3d"}}],[11,"new","","",20,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color3d"}}],[11,"from","","",20,null],[0,"color4","assimp::math","",null,null],[3,"Color4D","assimp::math::color4","Color4D docs",null,null],[3,"Color4DIter","","Color4DIter docs",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"color4d"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"color4d"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"color4d"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"aicolor4d"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",21,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color4d"}}],[11,"from","","",21,null],[0,"matrix3","assimp::math","",null,null],[3,"Matrix3x3","assimp::math::matrix3","Matrix3x3 docs",null,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"matrix3x3"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"matrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"matrix3x3"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix3x3"}}],[11,"new","","",23,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"matrix3x3"}}],[0,"matrix4","assimp::math","",null,null],[3,"Matrix4x4","assimp::math::matrix4","Matrix4x4 docs",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"matrix4x4"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"matrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"matrix4x4"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix4x4"}}],[11,"new","","",24,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"matrix4x4"}}],[0,"quaternion","assimp::math","",null,null],[3,"Quaternion","assimp::math::quaternion","Quaternion docs",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"aiquaternion"}}],[11,"new","","",25,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"quaternion"}}],[0,"vector2","assimp::math","",null,null],[3,"Vector2D","assimp::math::vector2","Vector2D docs",null,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vector2d"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"vector2d"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"vector2d"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"aivector2d"}}],[11,"new","","",26,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"vector2d"}}],[11,"from","","",26,null],[0,"vector3","assimp::math","",null,null],[3,"Vector3D","assimp::math::vector3","Vector3D docs",null,null],[3,"Vector3DIter","","Vector3DIter docs",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vector3d"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"vector3d"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"vector3d"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"aivector3d"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",27,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector3d"}}],[11,"from","","",27,null],[0,"scene","assimp","The `scene` module contains definitions of imported scene data.",null,null],[3,"Animation","assimp::scene","Animation type (not yet implemented)",null,null],[3,"AnimationIter","","Animation iterator type.",null,null],[3,"NodeAnim","","NodeAnim type (not yet implemented)",null,null],[3,"NodeAnimIter","","NodeAnim iterator type.",null,null],[3,"VectorKey","","VectorKey type (not yet implemented)",null,null],[3,"VectorKeyIter","","VectorKey iterator type.",null,null],[3,"QuatKey","","QuatKey type (not yet implemented)",null,null],[3,"QuatKeyIter","","QuatKey iterator type.",null,null],[3,"Camera","","Camera type (not yet implemented)",null,null],[3,"CameraIter","","Camera iterator type.",null,null],[3,"Face","","Face type (not yet implemented)",null,null],[3,"FaceIter","","Face iterator type.",null,null],[3,"Light","","Light type (not yet implemented)",null,null],[3,"LightIter","","Light iterator type.",null,null],[3,"Material","","Material type (not yet implemented)",null,null],[3,"MaterialIter","","Material iterator type.",null,null],[3,"Mesh","","Mesh type (incomplete)",null,null],[3,"MeshIter","","Mesh iterator type.",null,null],[3,"Bone","","Bone type",null,null],[3,"BoneIter","","Bone iterator type.",null,null],[3,"VertexWeight","","Vertex weight type",null,null],[3,"VertexWeightIter","","Vertex weight iterator type.",null,null],[3,"Node","","The `Node` type represents a node in the imported scene hierarchy.",null,null],[3,"NodeIter","","Node iterator type.",null,null],[3,"Scene","","The `Scene` type is the root container for all imported scene data.",null,null],[3,"Texture","","Texture type.",null,null],[3,"TextureIter","","Texture iterator type.",null,null],[11,"deref","assimp","",29,{"inputs":[{"name":"self"}],"output":{"name":"aianimation"}}],[11,"next","assimp::scene","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",31,{"inputs":[{"name":"self"}],"output":{"name":"ainodeanim"}}],[11,"next","assimp::scene","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",33,{"inputs":[{"name":"self"}],"output":{"name":"aivectorkey"}}],[11,"next","assimp::scene","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",35,{"inputs":[{"name":"self"}],"output":{"name":"aiquatkey"}}],[11,"next","assimp::scene","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_position_key","assimp","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_rotation_key","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_scaling_key","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_node_anim","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"aicamera"}}],[11,"next","assimp::scene","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",39,{"inputs":[{"name":"self"}],"output":{"name":"aiface"}}],[11,"next","assimp::scene","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","assimp","",39,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"c_uint"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ailight"}}],[11,"next","assimp::scene","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",43,{"inputs":[{"name":"self"}],"output":{"name":"aimaterial"}}],[11,"next","assimp::scene","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","assimp","",45,{"inputs":[{"name":"self"}],"output":{"name":"aimesh"}}],[11,"next","assimp::scene","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"aibone"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"aivertexweight"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"primitive_types","assimp","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_vertices","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"vertex_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vector3diter"}}],[11,"get_vertex","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"normal_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vector3diter"}}],[11,"get_normal","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"tangent_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vector3diter"}}],[11,"get_tangent","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"bitangent_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vector3diter"}}],[11,"get_bitangent","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"vertex_color_iter","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"color4diter"}}],[11,"get_vertex_color","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u32"}],"output":{"name":"option"}}],[11,"texture_coords_iter","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3diter"}}],[11,"get_texture_coord","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_faces","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"face_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"faceiter"}}],[11,"get_face","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_bones","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"bone_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"boneiter"}}],[11,"get_bone","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"name","assimp::scene","Returns the name of the bone.",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"offset_matrix","","Returns the bones's offset transformation matrix.",47,{"inputs":[{"name":"self"}],"output":{"name":"matrix4x4"}}],[11,"num_weights","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weight_iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"vertexweightiter"}}],[11,"get_weight","","",47,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"deref","assimp","",51,{"inputs":[{"name":"self"}],"output":{"name":"ainode"}}],[11,"next","assimp::scene","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","assimp","Returns the name of the node.",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"transformation","","Returns the node's transformation matrix.",51,{"inputs":[{"name":"self"}],"output":{"name":"matrix4x4"}}],[11,"parent","","Return the parent of this node. Returns `None` if this node is the root node.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_children","","Returns the number of child nodes.",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"child_iter","","Returns a vector containing all of the child nodes under this node.",51,{"inputs":[{"name":"self"}],"output":{"name":"nodeiter"}}],[11,"num_meshes","","Returns the number of meshes under this node.",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"meshes","","Returns a vector containing all of the meshes under this node. These are indices into the meshes contained in the `Scene` struct.",51,null],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"aiscene"}}],[11,"is_incomplete","","Returns true if the imported scene is not complete.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_validated","","Returns true if the imported scene was successfully validated by the `validate_data_structure` post-process step.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_validation_warning","","Returns true if any warnings were generated by the `validate_data_structure` post-process step. The details of the warnings are written to the output log.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_non_verbose_format","","Returns true if the `join_identical_vertices` post-process step was run.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_terrain","","Returns true if the imported mesh contained height-map terrain data.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"root_node","","Returns the root node of the scene hierarchy",53,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"num_meshes","","Returns the number of meshes in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mesh_iter","","Returns an iterator over all the meshes in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"meshiter"}}],[11,"mesh","","Return an individual mesh from the scene.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"num_materials","","Returns the number of materials in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"material_iter","","Returns an iterator over all the materials in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"materialiter"}}],[11,"num_animations","","Returns the number of animations in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"animation_iter","","Returns an iterator over all the animations in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"animationiter"}}],[11,"animation","","Return an individual animation from the scene.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"num_textures","","Returns the number of animations in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"texture_iter","","Returns an iterator over all the textures in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"textureiter"}}],[11,"num_lights","","Returns the number of lights in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"light_iter","","Returns an iterator over all the lights in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"lightiter"}}],[11,"num_cameras","","Returns the number of cameras in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"camera_iter","","Returns an iterator over all the cameras in the scene.",53,{"inputs":[{"name":"self"}],"output":{"name":"cameraiter"}}],[11,"drop","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"aitexture"}}],[11,"next","assimp::scene","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"CalcTangentSpace"],[3,"RemoveComponent"],[3,"GenerateNormals"],[3,"SplitLargeMeshes"],[3,"PreTransformVertices"],[3,"LimitBoneWeights"],[3,"ImproveCacheLocality"],[3,"RemoveRedundantMaterials"],[3,"SortByPrimitiveType"],[3,"FindDegenerates"],[3,"FindInvalidData"],[3,"TransformUVCoords"],[3,"OptimizeGraph"],[3,"SplitByBoneCount"],[3,"Debone"],[4,"ComponentType"],[4,"UVTransformFlag"],[4,"PrimitiveType"],[3,"Importer"],[3,"LogStream"],[3,"Color3D"],[3,"Color4D"],[3,"Color4DIter"],[3,"Matrix3x3"],[3,"Matrix4x4"],[3,"Quaternion"],[3,"Vector2D"],[3,"Vector3D"],[3,"Vector3DIter"],[3,"Animation"],[3,"AnimationIter"],[3,"NodeAnim"],[3,"NodeAnimIter"],[3,"VectorKey"],[3,"VectorKeyIter"],[3,"QuatKey"],[3,"QuatKeyIter"],[3,"Camera"],[3,"CameraIter"],[3,"Face"],[3,"FaceIter"],[3,"Light"],[3,"LightIter"],[3,"Material"],[3,"MaterialIter"],[3,"Mesh"],[3,"MeshIter"],[3,"Bone"],[3,"BoneIter"],[3,"VertexWeight"],[3,"VertexWeightIter"],[3,"Node"],[3,"NodeIter"],[3,"Scene"],[3,"Texture"],[3,"TextureIter"]]};
searchIndex["assimp_sys"] = {"doc":"","items":[[3,"AiVectorKey","assimp_sys","",null,null],[12,"time","","",0,null],[12,"value","","",0,null],[3,"AiQuatKey","","",null,null],[12,"time","","",1,null],[12,"value","","",1,null],[3,"AiMeshKey","","",null,null],[12,"time","","",2,null],[12,"value","","",2,null],[3,"AiMeshMorphKey","","",null,null],[12,"time","","",3,null],[12,"values","","",3,null],[12,"weights","","",3,null],[12,"num_values_and_weights","","",3,null],[3,"AiNodeAnim","","",null,null],[12,"node_name","","",4,null],[12,"num_position_keys","","",4,null],[12,"position_keys","","",4,null],[12,"num_rotation_keys","","",4,null],[12,"rotation_keys","","",4,null],[12,"num_scaling_keys","","",4,null],[12,"scaling_keys","","",4,null],[12,"pre_state","","",4,null],[12,"post_state","","",4,null],[3,"AiMeshAnim","","",null,null],[12,"name","","",5,null],[12,"num_keys","","",5,null],[12,"keys","","",5,null],[3,"AiMeshMorphAnim","","",null,null],[12,"name","","",6,null],[12,"num_keys","","",6,null],[12,"keys","","",6,null],[3,"AiAnimation","","",null,null],[12,"name","","",7,null],[12,"duration","","",7,null],[12,"ticks_per_second","","",7,null],[12,"num_channels","","",7,null],[12,"channels","","",7,null],[12,"num_mesh_channels","","",7,null],[12,"mesh_channels","","",7,null],[12,"num_morph_mesh_channels","","",7,null],[12,"morph_mesh_channels","","",7,null],[3,"AiCamera","","",null,null],[12,"name","","",8,null],[12,"position","","",8,null],[12,"up","","",8,null],[12,"look_at","","",8,null],[12,"horizontal_fov","","",8,null],[12,"clip_plane_near","","",8,null],[12,"clip_plane_far","","",8,null],[12,"aspect","","",8,null],[3,"AiExportFormatDesc","","",null,null],[12,"id","","",9,null],[12,"description","","",9,null],[12,"file_extension","","",9,null],[3,"AiExportDataBlob","","",null,null],[12,"size","","",10,null],[12,"data","","",10,null],[12,"name","","",10,null],[12,"next","","",10,null],[3,"AiFileIO","","",null,null],[12,"open_proc","","",11,null],[12,"close_proc","","",11,null],[12,"user_data","","",11,null],[3,"AiFile","","",null,null],[12,"read_proc","","",12,null],[12,"write_proc","","",12,null],[12,"tell_proc","","",12,null],[12,"file_size_proc","","",12,null],[12,"seek_proc","","",12,null],[12,"flush_proc","","",12,null],[12,"user_data","","",12,null],[3,"AiLogStream","","",null,null],[12,"callback","","",13,null],[12,"user","","",13,null],[3,"AiPropertyStore","","",null,null],[12,"sentinel","","",14,null],[3,"AiImporterFlags","","",null,null],[3,"AiImporterDesc","","",null,null],[12,"name","","",15,null],[12,"author","","",15,null],[12,"maintainer","","",15,null],[12,"comments","","",15,null],[12,"flags","","",15,null],[12,"min_major","","",15,null],[12,"min_minor","","",15,null],[12,"max_major","","",15,null],[12,"max_minor","","",15,null],[12,"file_extensions","","",15,null],[3,"AiLight","","",null,null],[12,"name","","",16,null],[12,"light_type","","",16,null],[12,"position","","",16,null],[12,"direction","","",16,null],[12,"up","","",16,null],[12,"attenuation_constant","","",16,null],[12,"attenuation_linear","","",16,null],[12,"attenuation_quadratic","","",16,null],[12,"color_diffuse","","",16,null],[12,"color_specular","","",16,null],[12,"color_ambient","","",16,null],[12,"angle_inner_cone","","",16,null],[12,"angle_outer_cone","","",16,null],[12,"size","","",16,null],[3,"AiTextureFlags","","",null,null],[3,"AiUVTransform","","",null,null],[12,"translation","","",17,null],[12,"scaling","","",17,null],[12,"rotation","","",17,null],[3,"AiMaterialProperty","","",null,null],[12,"key","","",18,null],[12,"semantic","","",18,null],[12,"index","","",18,null],[12,"data_length","","",18,null],[12,"property_type","","",18,null],[12,"data","","",18,null],[3,"AiMaterial","","",null,null],[12,"properties","","",19,null],[12,"num_properties","","",19,null],[12,"num_allocated","","",19,null],[3,"AiFace","","",null,null],[12,"num_indices","","",20,null],[12,"indices","","",20,null],[3,"AiVertexWeight","","",null,null],[12,"vertex_id","","",21,null],[12,"weight","","",21,null],[3,"AiBone","","",null,null],[12,"name","","",22,null],[12,"num_weights","","",22,null],[12,"weights","","",22,null],[12,"offset_matrix","","",22,null],[3,"AiPrimitiveType","","",null,null],[3,"AiAnimMesh","","",null,null],[12,"vertices","","",23,null],[12,"normals","","",23,null],[12,"tangents","","",23,null],[12,"bitangents","","",23,null],[12,"colors","","",23,null],[12,"texture_coords","","",23,null],[12,"num_vertices","","",23,null],[12,"weight","","",23,null],[3,"AiMesh","","",null,null],[12,"primitive_types","","",24,null],[12,"num_vertices","","",24,null],[12,"num_faces","","",24,null],[12,"vertices","","",24,null],[12,"normals","","",24,null],[12,"tangents","","",24,null],[12,"bitangents","","",24,null],[12,"colors","","",24,null],[12,"texture_coords","","",24,null],[12,"num_uv_components","","",24,null],[12,"faces","","",24,null],[12,"num_bones","","",24,null],[12,"bones","","",24,null],[12,"material_index","","",24,null],[12,"name","","",24,null],[12,"num_anim_meshes","","",24,null],[12,"anim_meshes","","",24,null],[12,"method","","",24,null],[3,"AiMetadataEntry","","",null,null],[12,"data_type","","",25,null],[12,"data","","",25,null],[3,"AiMetadata","","",null,null],[12,"num_properties","","",26,null],[12,"keys","","",26,null],[12,"values","","",26,null],[3,"AiPostProcessSteps","","",null,null],[3,"AiNode","","",null,null],[12,"name","","",27,null],[12,"transformation","","",27,null],[12,"parent","","",27,null],[12,"num_children","","",27,null],[12,"children","","",27,null],[12,"num_meshes","","",27,null],[12,"meshes","","",27,null],[12,"metadata","","",27,null],[3,"AiSceneFlags","","",null,null],[3,"AiScene","","",null,null],[12,"flags","","",28,null],[12,"root_node","","",28,null],[12,"num_meshes","","",28,null],[12,"meshes","","",28,null],[12,"num_materials","","",28,null],[12,"materials","","",28,null],[12,"num_animations","","",28,null],[12,"animations","","",28,null],[12,"num_textures","","",28,null],[12,"textures","","",28,null],[12,"num_lights","","",28,null],[12,"lights","","",28,null],[12,"num_cameras","","",28,null],[12,"cameras","","",28,null],[3,"AiTexel","","",null,null],[12,"b","","",29,null],[12,"g","","",29,null],[12,"r","","",29,null],[12,"a","","",29,null],[3,"AiTexture","","",null,null],[12,"width","","",30,null],[12,"height","","",30,null],[12,"format_hint","","",30,null],[12,"data","","",30,null],[3,"AiColor3D","","",null,null],[12,"r","","",31,null],[12,"g","","",31,null],[12,"b","","",31,null],[3,"AiColor4D","","",null,null],[12,"r","","",32,null],[12,"g","","",32,null],[12,"b","","",32,null],[12,"a","","",32,null],[3,"AiMatrix3x3","","",null,null],[12,"a1","","",33,null],[12,"a2","","",33,null],[12,"a3","","",33,null],[12,"b1","","",33,null],[12,"b2","","",33,null],[12,"b3","","",33,null],[12,"c1","","",33,null],[12,"c2","","",33,null],[12,"c3","","",33,null],[3,"AiMatrix4x4","","",null,null],[12,"a1","","",34,null],[12,"a2","","",34,null],[12,"a3","","",34,null],[12,"a4","","",34,null],[12,"b1","","",34,null],[12,"b2","","",34,null],[12,"b3","","",34,null],[12,"b4","","",34,null],[12,"c1","","",34,null],[12,"c2","","",34,null],[12,"c3","","",34,null],[12,"c4","","",34,null],[12,"d1","","",34,null],[12,"d2","","",34,null],[12,"d3","","",34,null],[12,"d4","","",34,null],[3,"AiQuaternion","","",null,null],[12,"w","","",35,null],[12,"x","","",35,null],[12,"y","","",35,null],[12,"z","","",35,null],[3,"AiString","","",null,null],[12,"length","","",36,null],[12,"data","","",36,null],[3,"AiVector2D","","",null,null],[12,"x","","",37,null],[12,"y","","",37,null],[3,"AiVector3D","","",null,null],[12,"x","","",38,null],[12,"y","","",38,null],[12,"z","","",38,null],[3,"AiPlane","","",null,null],[12,"a","","",39,null],[12,"b","","",39,null],[12,"c","","",39,null],[12,"d","","",39,null],[3,"AiRay","","",null,null],[12,"pos","","",40,null],[12,"dir","","",40,null],[3,"AiMemoryInfo","","",null,null],[12,"textures","","",41,null],[12,"materials","","",41,null],[12,"meshes","","",41,null],[12,"nodes","","",41,null],[12,"animations","","",41,null],[12,"cameras","","",41,null],[12,"lights","","",41,null],[12,"total","","",41,null],[3,"AiCompileFlags","","",null,null],[4,"AiAnimBehaviour","","",null,null],[13,"Default","","",42,null],[13,"Constant","","",42,null],[13,"Linear","","",42,null],[13,"Repeat","","",42,null],[4,"AiLightSourceType","","",null,null],[13,"Undefined","","",43,null],[13,"Directional","","",43,null],[13,"Point","","",43,null],[13,"Spot","","",43,null],[13,"Ambient","","",43,null],[13,"Area","","",43,null],[4,"AiTextureOp","","",null,null],[13,"Multiply","","",44,null],[13,"Add","","",44,null],[13,"Subtract","","",44,null],[13,"Divide","","",44,null],[13,"SmoothAdd","","",44,null],[13,"SignedAdd","","",44,null],[4,"AiTextureMapMode","","",null,null],[13,"Wrap","","",45,null],[13,"Clamp","","",45,null],[13,"Mirror","","",45,null],[13,"Decal","","",45,null],[4,"AiTextureMapping","","",null,null],[13,"UV","","",46,null],[13,"Sphere","","",46,null],[13,"Cylinder","","",46,null],[13,"Box","","",46,null],[13,"Plane","","",46,null],[13,"Other","","",46,null],[4,"AiTextureType","","",null,null],[13,"None","","",47,null],[13,"Diffuse","","",47,null],[13,"Specular","","",47,null],[13,"Ambient","","",47,null],[13,"Emissive","","",47,null],[13,"Height","","",47,null],[13,"Normals","","",47,null],[13,"Shininess","","",47,null],[13,"Opacity","","",47,null],[13,"Displacement","","",47,null],[13,"Lightmap","","",47,null],[13,"Reflection","","",47,null],[13,"Unknown","","",47,null],[4,"AiShadingMode","","",null,null],[13,"Flat","","",48,null],[13,"Gouraud","","",48,null],[13,"Phong","","",48,null],[13,"Blinn","","",48,null],[13,"Toon","","",48,null],[13,"OrenNayar","","",48,null],[13,"Minnaert","","",48,null],[13,"CookTorrance","","",48,null],[13,"NoShading","","",48,null],[13,"Fresnel","","",48,null],[4,"AiBlendMode","","",null,null],[13,"Default","","",49,null],[13,"Additive","","",49,null],[4,"AiPropertyTypeInfo","","",null,null],[13,"Float","","",50,null],[13,"Double","","",50,null],[13,"String","","",50,null],[13,"Integer","","",50,null],[13,"Buffer","","",50,null],[4,"AiMorphingMethod","","",null,null],[13,"VertexBlend","","",51,null],[13,"MorphNormalized","","",51,null],[13,"MorphRelative","","",51,null],[4,"AiMetadataType","","",null,null],[13,"Bool","","",52,null],[13,"Int32","","",52,null],[13,"Uint64","","",52,null],[13,"Float","","",52,null],[13,"Double","","",52,null],[13,"AiString","","",52,null],[13,"AiVector3D","","",52,null],[4,"AiReturn","","",null,null],[13,"Success","","",53,null],[13,"Failure","","",53,null],[13,"OutOfMemory","","",53,null],[4,"AiOrigin","","",null,null],[13,"Set","","",54,null],[13,"Cur","","",54,null],[13,"End","","",54,null],[4,"AiDefaultLogStream","","",null,null],[13,"File","","",55,null],[13,"StdOut","","",55,null],[13,"StdErr","","",55,null],[13,"Debugger","","",55,null],[5,"aiGetExportFormatCount","","",null,null],[5,"aiGetExportFormatDescription","","",null,null],[5,"aiReleaseExportFormatDescription","","",null,null],[5,"aiCopyScene","","",null,null],[5,"aiFreeScene","","",null,null],[5,"aiExportScene","","",null,null],[5,"aiExportSceneEx","","",null,null],[5,"aiExportSceneToBlob","","",null,null],[5,"aiReleaseExportBlob","","",null,null],[5,"aiImportFile","","",null,null],[5,"aiImportFileEx","","",null,null],[5,"aiImportFileExWithProperties","","",null,null],[5,"aiImportFileFromMemory","","",null,null],[5,"aiImportFileFromMemoryWithProperties","","",null,null],[5,"aiApplyPostProcessing","","",null,null],[5,"aiGetPredefinedLogStream","","",null,null],[5,"aiAttachLogStream","","",null,null],[5,"aiEnableVerboseLogging","","",null,null],[5,"aiDetachLogStream","","",null,null],[5,"aiDetachAllLogStreams","","",null,null],[5,"aiReleaseImport","","",null,null],[5,"aiGetErrorString","","",null,null],[5,"aiIsExtensionSupported","","",null,null],[5,"aiGetExtensionList","","",null,null],[5,"aiGetMemoryRequirements","","",null,null],[5,"aiCreatePropertyStore","","",null,null],[5,"aiReleasePropertyStore","","",null,null],[5,"aiSetImportPropertyInteger","","",null,null],[5,"aiSetImportPropertyFloat","","",null,null],[5,"aiSetImportPropertyString","","",null,null],[5,"aiSetImportPropertyMatrix","","",null,null],[5,"aiCreateQuaternionFromMatrix","","",null,null],[5,"aiDecomposeMatrix","","",null,null],[5,"aiTransposeMatrix4","","",null,null],[5,"aiTransposeMatrix3","","",null,null],[5,"aiTransformVecByMatrix3","","",null,null],[5,"aiTransformVecByMatrix4","","",null,null],[5,"aiMultiplyMatrix4","","",null,null],[5,"aiMultiplyMatrix3","","",null,null],[5,"aiIdentityMatrix3","","",null,null],[5,"aiIdentityMatrix4","","",null,null],[5,"aiGetImportFormatCount","","",null,null],[5,"aiGetImportFormatDescription","","",null,null],[5,"aiGetImporterDesc","","",null,null],[5,"aiGetMaterialProperty","","",null,null],[5,"aiGetMaterialFloatArray","","",null,null],[5,"aiGetMaterialIntegerArray","","",null,null],[5,"aiGetMaterialColor","","",null,null],[5,"aiGetMaterialUVTransform","","",null,null],[5,"aiGetMaterialString","","",null,null],[5,"aiGetMaterialTextureCount","","",null,null],[5,"aiGetMaterialTexture","","",null,null],[5,"aiGetLegalString","","",null,null],[5,"aiGetVersionMinor","","",null,null],[5,"aiGetVersionMajor","","",null,null],[5,"aiGetVersionRevision","","",null,null],[5,"aiGetCompileFlags","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"aivectorkey"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"aiquatkey"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"aimeshkey"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"aimeshmorphkey"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"aianimbehaviour"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"aicamera"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"aipropertystore"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"config","","",null,null],[3,"AiComponent","assimp_sys::config","",null,null],[3,"AiUVTransformFlags","","",null,null],[17,"AI_SBBC_DEFAULT_MAX_BONES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_TRIANGLES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_VERTICES","","",null,null],[17,"AI_LMW_MAX_WEIGHTS","","",null,null],[17,"AI_DEBONE_THRESHOLD","","",null,null],[17,"PP_ICL_DEFAULT_PTCACHE_SIZE","","",null,null],[17,"GLOB_MEASURE_TIME","","",null,null],[17,"IMPORT_NO_SKELETON_MESHES","","",null,null],[17,"GLOB_MULTITHREADING","","",null,null],[17,"PP_SBBC_MAX_BONES","","",null,null],[17,"PP_CT_MAX_SMOOTHING_ANGLE","","",null,null],[17,"PP_CT_TEXTURE_CHANNEL_INDEX","","",null,null],[17,"PP_GSN_MAX_SMOOTHING_ANGLE","","",null,null],[17,"IMPORT_MDL_COLORMAP","","",null,null],[17,"PP_RRM_EXCLUDE_LIST","","",null,null],[17,"PP_PTV_KEEP_HIERARCHY","","",null,null],[17,"PP_PTV_NORMALIZE","","",null,null],[17,"PP_PTV_ADD_ROOT_TRANSFORMATION","","",null,null],[17,"PP_PTV_ROOT_TRANSFORMATION","","",null,null],[17,"PP_FD_REMOVE","","",null,null],[17,"PP_OG_EXCLUDE_LIST","","",null,null],[17,"PP_SLM_TRIANGLE_LIMIT","","",null,null],[17,"PP_SLM_VERTEX_LIMIT","","",null,null],[17,"PP_LBW_MAX_WEIGHTS","","",null,null],[17,"PP_DB_THRESHOLD","","",null,null],[17,"PP_DB_ALL_OR_NONE","","",null,null],[17,"PP_ICL_PTCACHE_SIZE","","",null,null],[17,"PP_RVC_FLAGS","","",null,null],[17,"PP_SBP_REMOVE","","",null,null],[17,"PP_FID_ANIM_ACCURACY","","",null,null],[17,"PP_TUV_EVALUATE","","",null,null],[17,"FAVOUR_SPEED","","",null,null],[17,"IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS","","",null,null],[17,"IMPORT_FBX_READ_ALL_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_TEXTURES","","",null,null],[17,"IMPORT_FBX_READ_CAMERAS","","",null,null],[17,"IMPORT_FBX_READ_LIGHTS","","",null,null],[17,"IMPORT_FBX_READ_ANIMATIONS","","",null,null],[17,"IMPORT_FBX_STRICT_MODE","","",null,null],[17,"IMPORT_FBX_PRESERVE_PIVOTS","","",null,null],[17,"IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES","","",null,null],[17,"IMPORT_GLOBAL_KEYFRAME","","",null,null],[17,"IMPORT_MD3_KEYFRAME","","",null,null],[17,"IMPORT_MD2_KEYFRAME","","",null,null],[17,"IMPORT_MDL_KEYFRAME","","",null,null],[17,"IMPORT_MDC_KEYFRAME","","",null,null],[17,"IMPORT_SMD_KEYFRAME","","",null,null],[17,"IMPORT_UNREAL_KEYFRAME","","",null,null],[17,"IMPORT_AC_SEPARATE_BFCULL","","",null,null],[17,"IMPORT_AC_EVAL_SUBDIVISION","","",null,null],[17,"UNREAL_HANDLE_FLAGS","","",null,null],[17,"IMPORT_TER_MAKE_UVS","","",null,null],[17,"IMPORT_ASE_RECONSTRUCT_NORMALS","","",null,null],[17,"IMPORT_MD3_HANDLE_MULTIPART","","",null,null],[17,"IMPORT_MD3_SKIN_NAME","","",null,null],[17,"IMPORT_MD3_SHADER_SRC","","",null,null],[17,"IMPORT_LWO_ONE_LAYER_ONLY","","",null,null],[17,"IMPORT_MD5_NO_ANIM_AUTOLOAD","","",null,null],[17,"IMPORT_LWS_ANIM_START","","",null,null],[17,"IMPORT_LWS_ANIM_END","","",null,null],[17,"IMPORT_IRR_ANIM_FPS","","",null,null],[17,"IMPORT_OGRE_MATERIAL_FILE","","",null,null],[17,"IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME","","",null,null],[17,"IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_CUSTOM_TRIANGULATION","","",null,null],[17,"IMPORT_COLLADA_IGNORE_UP_DIRECTION","","",null,null],[17,"IMPORT_COLLADA_INVERT_TRANSPARENCY","","",null,null],[17,"EXPORT_XFILE_64BIT","","",null,null],[17,"AICOMPONENT_NORMALS","","",null,null],[17,"AICOMPONENT_TANGENTS_AND_BITANGENTS","","",null,null],[17,"AICOMPONENT_COLORS","","",null,null],[17,"AICOMPONENT_TEXCOORDS","","",null,null],[17,"AICOMPONENT_BONE_WEIGHTS","","",null,null],[17,"AICOMPONENT_ANIMATIONS","","",null,null],[17,"AICOMPONENT_TEXTURES","","",null,null],[17,"AICOMPONENT_LIGHTS","","",null,null],[17,"AICOMPONENT_CAMERAS","","",null,null],[17,"AICOMPONENT_MESHES","","",null,null],[17,"AICOMPONENT_MATERIALS","","",null,null],[17,"AI_UVTRAFO_SCALING","","",null,null],[17,"AI_UVTRAFO_ROTATION","","",null,null],[17,"AI_UVTRAFO_TRANSLATION","","",null,null],[17,"AI_UVTRAFO_ALL","","",null,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"aicomponent"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",56,{"inputs":[],"output":{"name":"aicomponent"}}],[11,"all","","Returns the set containing all flags.",56,{"inputs":[],"output":{"name":"aicomponent"}}],[11,"bits","","Returns the raw value of the flags currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",56,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",56,{"inputs":[{"name":"c_uint"}],"output":{"name":"aicomponent"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitor_assign","","Adds the set of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitxor_assign","","Toggles the set of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"sub_assign","","Disables all flags enabled in the set.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",56,{"inputs":[{"name":"self"}],"output":{"name":"aicomponent"}}],[11,"extend","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",56,{"inputs":[{"name":"t"}],"output":{"name":"aicomponent"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransformflags"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"aiuvtransformflags"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"aiuvtransformflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",57,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiuvtransformflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitor_assign","","Adds the set of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",57,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransformflags"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"aiuvtransformflags"}}],[11,"eq","assimp_sys","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"aiimporterflags"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[],"output":{"name":"aiimporterflags"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[],"output":{"name":"aiimporterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiimporterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"aiimporterflags"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"aiimporterflags"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ailightsourcetype"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"ailight"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aitextureop"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"aitexturemapmode"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"aitexturemapping"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"aitexturetype"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"aishadingmode"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"aitextureflags"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"ordering"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[],"output":{"name":"aitextureflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[],"output":{"name":"aitextureflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",59,{"inputs":[{"name":"c_uint"}],"output":{"name":"aitextureflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitor_assign","","Adds the set of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"self"}],"output":{"name":"aitextureflags"}}],[11,"extend","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",59,{"inputs":[{"name":"t"}],"output":{"name":"aitextureflags"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"aiblendmode"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransform"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"aipropertytypeinfo"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"aivertexweight"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"aiprimitivetype"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[],"output":{"name":"aiprimitivetype"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[],"output":{"name":"aiprimitivetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",60,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiprimitivetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitor_assign","","Adds the set of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"self"}],"output":{"name":"aiprimitivetype"}}],[11,"extend","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",60,{"inputs":[{"name":"t"}],"output":{"name":"aiprimitivetype"}}],[11,"has_positions","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_normals","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tangents_and_bitangents","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_vertex_colors","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"has_texture_coords","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"aimorphingmethod"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"aimorphingmethod"}],"output":{"name":"bool"}}],[11,"has_positions","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_faces","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_normals","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tangents_and_bitangents","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_vertex_colors","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"has_texture_coords","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_num_uv_channels","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_color_channels","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_bones","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"aimetadatatype"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"aipostprocesssteps"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[],"output":{"name":"aipostprocesssteps"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[],"output":{"name":"aipostprocesssteps"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"inputs":[{"name":"c_uint"}],"output":{"name":"aipostprocesssteps"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"self"}],"output":{"name":"aipostprocesssteps"}}],[11,"extend","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"aipostprocesssteps"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"aisceneflags"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[],"output":{"name":"aisceneflags"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[],"output":{"name":"aisceneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",62,{"inputs":[{"name":"c_uint"}],"output":{"name":"aisceneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitor_assign","","Adds the set of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"self"}],"output":{"name":"aisceneflags"}}],[11,"extend","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"aisceneflags"}}],[11,"has_meshes","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_materials","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_lights","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_textures","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_cameras","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animations","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"aitexel"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"aitexel"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"aitexel"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"aicolor3d"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"aicolor4d"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix3x3"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix4x4"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"aiquaternion"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"aistring"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",36,{"inputs":[{"name":"str"}],"output":{"name":"aistring"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"aistring"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"aistring"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"aivector2d"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"aivector3d"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"aiplane"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"airay"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"aireturn"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"aiorigin"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"aidefaultlogstream"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"aimemoryinfo"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"aimemoryinfo"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"aicompileflags"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",63,{"inputs":[],"output":{"name":"aicompileflags"}}],[11,"all","","Returns the set containing all flags.",63,{"inputs":[],"output":{"name":"aicompileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",63,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",63,{"inputs":[{"name":"c_uint"}],"output":{"name":"aicompileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitor_assign","","Adds the set of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",63,{"inputs":[{"name":"self"}],"output":{"name":"aicompileflags"}}],[11,"extend","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",63,{"inputs":[{"name":"t"}],"output":{"name":"aicompileflags"}}],[6,"AiFileWriteProc","","",null,null],[6,"AiFileReadProc","","",null,null],[6,"AiFileTellProc","","",null,null],[6,"AiFileFlushProc","","",null,null],[6,"AiFileSeek","","",null,null],[6,"AiFileOpenProc","","",null,null],[6,"AiFileCloseProc","","",null,null],[6,"AiUserData","","",null,null],[6,"AiLogStreamCallback","","",null,null],[6,"AiBool","","",null,null],[7,"AI_DEFAULT_MATERIAL_NAME","","",null,null],[17,"AI_FALSE","","",null,null],[17,"AI_TRUE","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_TEXT_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_BINARY_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_COMPRESSED_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_LIMITED_SUPPORT","","",null,null],[17,"AIIMPORTERFLAG_EXPERIMENTAL","","",null,null],[17,"AITEXTUREFLAG_INVERT","","",null,null],[17,"AITEXTUREFLAG_USE_ALPHA","","",null,null],[17,"AITEXTUREFLAG_IGNORE_ALPHA","","",null,null],[17,"AI_MAX_FACE_INDICES","","",null,null],[17,"AI_MAX_BONE_WEIGHTS","","",null,null],[17,"AI_MAX_VERTICES","","",null,null],[17,"AI_MAX_FACES","","",null,null],[17,"AI_MAX_NUMBER_OF_COLOR_SETS","","",null,null],[17,"AI_MAX_NUMBER_OF_TEXTURECOORDS","","",null,null],[17,"AIPRIMITIVETYPE_POINT","","",null,null],[17,"AIPRIMITIVETYPE_LINE","","",null,null],[17,"AIPRIMITIVETYPE_TRIANGLE","","",null,null],[17,"AIPRIMITIVETYPE_POLYGON","","",null,null],[17,"AIPROCESS_CALC_TANGENT_SPACE","","",null,null],[17,"AIPROCESS_JOIN_IDENTICAL_VERTICES","","",null,null],[17,"AIPROCESS_MAKE_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TRIANGULATE","","",null,null],[17,"AIPROCESS_REMOVE_COMPONENT","","",null,null],[17,"AIPROCESS_GEN_NORMALS","","",null,null],[17,"AIPROCESS_GEN_SMOOTH_NORMALS","","",null,null],[17,"AIPROCESS_SPLIT_LARGE_MESHES","","",null,null],[17,"AIPROCESS_PRE_TRANSFORM_VERTICES","","",null,null],[17,"AIPROCESS_LIMIT_BONE_WEIGHTS","","",null,null],[17,"AIPROCESS_VALIDATE_DATA_STRUCTURE","","",null,null],[17,"AIPROCESS_IMPROVE_CACHE_LOCALITY","","",null,null],[17,"AIPROCESS_REMOVE_REDUNDANT_MATERIALS","","",null,null],[17,"AIPROCESS_FIX_INFACING_NORMALS","","",null,null],[17,"AIPROCESS_SORT_BY_PTYPE","","",null,null],[17,"AIPROCESS_FIND_DEGENERATES","","",null,null],[17,"AIPROCESS_FIND_INVALID_DATA","","",null,null],[17,"AIPROCESS_GEN_UV_COORDS","","",null,null],[17,"AIPROCESS_TRANSFORM_UV_COORDS","","",null,null],[17,"AIPROCESS_FIND_INSTANCES","","",null,null],[17,"AIPROCESS_OPTIMIZE_MESHES","","",null,null],[17,"AIPROCESS_OPTIMIZE_GRAPH","","",null,null],[17,"AIPROCESS_FLIP_UVS","","",null,null],[17,"AIPROCESS_FLIP_WINDING_ORDER","","",null,null],[17,"AIPROCESS_SPLIT_BY_BONE_COUNT","","",null,null],[17,"AIPROCESS_DEBONE","","",null,null],[17,"AIPROCESS_CONVERT_TO_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_FAST","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_QUALITY","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_MAX_QUALITY","","",null,null],[17,"AI_SCENE_FLAGS_INCOMPLETE","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATED","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATION_WARNING","","",null,null],[17,"AI_SCENE_FLAGS_NON_VERBOSE_FORMAT","","",null,null],[17,"AI_SCENE_FLAGS_TERRAIN","","",null,null],[17,"AI_SCENE_FLAGS_ALLOW_SHARED","","",null,null],[17,"MAXLEN","","",null,null],[17,"ASSIMP_CFLAGS_SHARED","","",null,null],[17,"ASSIMP_CFLAGS_STLPORT","","",null,null],[17,"ASSIMP_CFLAGS_DEBUG","","",null,null],[17,"ASSIMP_CFLAGS_NOBOOST","","",null,null],[17,"ASSIMP_CFLAGS_SINGLETHREADED","","",null,null]],"paths":[[3,"AiVectorKey"],[3,"AiQuatKey"],[3,"AiMeshKey"],[3,"AiMeshMorphKey"],[3,"AiNodeAnim"],[3,"AiMeshAnim"],[3,"AiMeshMorphAnim"],[3,"AiAnimation"],[3,"AiCamera"],[3,"AiExportFormatDesc"],[3,"AiExportDataBlob"],[3,"AiFileIO"],[3,"AiFile"],[3,"AiLogStream"],[3,"AiPropertyStore"],[3,"AiImporterDesc"],[3,"AiLight"],[3,"AiUVTransform"],[3,"AiMaterialProperty"],[3,"AiMaterial"],[3,"AiFace"],[3,"AiVertexWeight"],[3,"AiBone"],[3,"AiAnimMesh"],[3,"AiMesh"],[3,"AiMetadataEntry"],[3,"AiMetadata"],[3,"AiNode"],[3,"AiScene"],[3,"AiTexel"],[3,"AiTexture"],[3,"AiColor3D"],[3,"AiColor4D"],[3,"AiMatrix3x3"],[3,"AiMatrix4x4"],[3,"AiQuaternion"],[3,"AiString"],[3,"AiVector2D"],[3,"AiVector3D"],[3,"AiPlane"],[3,"AiRay"],[3,"AiMemoryInfo"],[4,"AiAnimBehaviour"],[4,"AiLightSourceType"],[4,"AiTextureOp"],[4,"AiTextureMapMode"],[4,"AiTextureMapping"],[4,"AiTextureType"],[4,"AiShadingMode"],[4,"AiBlendMode"],[4,"AiPropertyTypeInfo"],[4,"AiMorphingMethod"],[4,"AiMetadataType"],[4,"AiReturn"],[4,"AiOrigin"],[4,"AiDefaultLogStream"],[3,"AiComponent"],[3,"AiUVTransformFlags"],[3,"AiImporterFlags"],[3,"AiTextureFlags"],[3,"AiPrimitiveType"],[3,"AiPostProcessSteps"],[3,"AiSceneFlags"],[3,"AiCompileFlags"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["cgmath"] = {"doc":"A low-dimensional linear algebra library, targeted at computer graphics.","items":[[8,"One","cgmath","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"Matrix2","","A 2 x 2, column major matrix",null,null],[12,"x","","The first column of the matrix.",2,null],[12,"y","","The second column of the matrix.",2,null],[3,"Matrix3","","A 3 x 3, column major matrix",null,null],[12,"x","","The first column of the matrix.",3,null],[12,"y","","The second column of the matrix.",3,null],[12,"z","","The third column of the matrix.",3,null],[3,"Matrix4","","A 4 x 4, column major matrix",null,null],[12,"x","","The first column of the matrix.",4,null],[12,"y","","The second column of the matrix.",4,null],[12,"z","","The third column of the matrix.",4,null],[12,"w","","The fourth column of the matrix.",4,null],[3,"Quaternion","","A quaternion in scalar/vector form.",null,null],[12,"s","","The scalar part of the quaternion.",5,null],[12,"v","","The vector part of the quaternion.",5,null],[3,"Vector1","","A 1-dimensional vector.",null,null],[12,"x","","The x component of the vector.",6,null],[3,"Vector2","","A 2-dimensional vector.",null,null],[12,"x","","The x component of the vector.",7,null],[12,"y","","The y component of the vector.",7,null],[3,"Vector3","","A 3-dimensional vector.",null,null],[12,"x","","The x component of the vector.",8,null],[12,"y","","The y component of the vector.",8,null],[12,"z","","The z component of the vector.",8,null],[3,"Vector4","","A 4-dimensional vector.",null,null],[12,"x","","The x component of the vector.",9,null],[12,"y","","The y component of the vector.",9,null],[12,"z","","The z component of the vector.",9,null],[12,"w","","The w component of the vector.",9,null],[3,"Deg","","An angle, in degrees.",null,null],[12,"0","","",10,null],[3,"Rad","","An angle, in radians.",null,null],[12,"0","","",11,null],[3,"Euler","","A set of [Euler angles] representing a rotation in three-dimensional space.",null,null],[12,"x","","The angle to apply around the x axis. Also known at the pitch.",12,null],[12,"y","","The angle to apply around the y axis. Also known at the yaw.",12,null],[12,"z","","The angle to apply around the z axis. Also known at the roll.",12,null],[3,"Point1","","A point in 1-dimensional space.",null,null],[12,"x","","",13,null],[3,"Point2","","A point in 2-dimensional space.",null,null],[12,"x","","",14,null],[12,"y","","",14,null],[3,"Point3","","A point in 3-dimensional space.",null,null],[12,"x","","",15,null],[12,"y","","",15,null],[12,"z","","",15,null],[3,"Basis2","","A two-dimensional rotation matrix.",null,null],[3,"Basis3","","A three-dimensional rotation matrix.",null,null],[3,"Decomposed","","A generic transformation consisting of a rotation, displacement vector and scale amount.",null,null],[12,"scale","","",16,null],[12,"rot","","",16,null],[12,"disp","","",16,null],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle.",null,null],[12,"fovy","","",17,null],[12,"aspect","","",17,null],[12,"near","","",17,null],[12,"far","","",17,null],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",18,null],[12,"right","","",18,null],[12,"bottom","","",18,null],[12,"top","","",18,null],[12,"near","","",18,null],[12,"far","","",18,null],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",19,null],[12,"right","","",19,null],[12,"bottom","","",19,null],[12,"top","","",19,null],[12,"near","","",19,null],[12,"far","","",19,null],[5,"dot","","Dot product of two vectors.",null,null],[5,"vec1","","The short constructor.",null,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[5,"vec2","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[5,"vec3","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[5,"vec4","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[5,"perspective","","Create a perspective projection matrix.",null,{"inputs":[{"name":"a"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"frustum","","Create a perspective matrix from a view frustrum.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"ortho","","Create an orthographic projection matrix.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[0,"conv","","Constrained conversion functions for assisting in situations where type inference is difficult.",null,null],[5,"array2","cgmath::conv","Force a conversion into a 2-element array.",null,null],[5,"array3","","Force a conversion into a 3-element array.",null,null],[5,"array4","","Force a conversion into a 4-element array.",null,null],[5,"array2x2","","Force a conversion into a 2x2-element array.",null,null],[5,"array3x3","","Force a conversion into a 3x3-element array.",null,null],[5,"array4x4","","Force a conversion into a 4x4-element array.",null,null],[0,"prelude","cgmath","This module contains the most common traits used in `cgmath`. By glob-importing this module, you can avoid the need to import each trait individually, while still being selective about what types you import.",null,null],[8,"One","cgmath::prelude","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Array","","An array containing elements of type `Element`",null,null],[16,"Element","","",20,null],[10,"from_value","","Construct a vector from a single value, replicating it.",20,null],[11,"as_ptr","","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"sum","","The sum of the elements of the array.",20,null],[10,"product","","The product of the elements of the array.",20,null],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",null,null],[10,"add_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"sub_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"mul_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"div_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"rem_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"add_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"sub_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"mul_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",null,null],[16,"Scalar","","The associated scalar.",22,null],[8,"MetricSpace","","A type with a distance function between values.",null,null],[16,"Metric","","The metric to be returned by the `distance` function.",23,null],[10,"distance2","","Returns the squared distance.",23,null],[11,"distance","","The distance between two values.",23,null],[8,"InnerSpace","","Vectors that also have a dot (or inner) product.",null,null],[10,"dot","","Vector dot (or inner) product.",24,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[8,"EuclideanSpace","","Points in a Euclidean space with an associated space of displacement vectors.",null,null],[16,"Scalar","","The associated scalar over which the space is defined.",25,null],[16,"Diff","","The associated space of displacement vectors.",25,null],[10,"origin","","The point at the origin of the Euclidean space.",25,{"inputs":[],"output":{"name":"self"}}],[10,"from_vec","","Convert a displacement vector to a point.",25,null],[10,"to_vec","","Convert a point to a displacement vector.",25,null],[11,"midpoint","","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[10,"dot","","This is a weird one, but its useful for plane calculations.",25,null],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",null,null],[16,"Row","","The row vector of the matrix.",26,null],[16,"Column","","The column vector of the matrix.",26,null],[16,"Transpose","","The result of transposing the matrix",26,null],[11,"as_ptr","","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[10,"row","","Get a row from this matrix by-value.",26,null],[10,"swap_rows","","Swap two rows of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_columns","","Swap two columns of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_elements","","Swap the values at index `a` and `b`",26,null],[10,"transpose","","Transpose this matrix, returning a new matrix.",26,null],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",null,null],[16,"ColumnRow","","The row/column vector of the matrix.",27,null],[10,"from_value","","Create a new diagonal matrix using the supplied value.",27,null],[10,"from_diagonal","","Create a matrix from a non-uniform scale",27,null],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[10,"transpose_self","","Transpose this matrix in-place.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",27,null],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",27,null],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Angle","","Angles and their associated trigonometric functions.",null,null],[16,"Unitless","","",28,null],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","","A full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_2","","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[10,"sin","","Compute the sine of the angle, returning a unitless ratio.",28,null],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",28,null],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",28,null],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",28,null],[11,"csc","","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[10,"asin","","Compute the arcsine of the ratio, returning the resulting angle.",28,null],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",28,null],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",28,null],[10,"atan2","","",28,null],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",null,null],[10,"look_at","","Create a rotation to a given direction with an 'up' vector.",29,null],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",29,null],[10,"rotate_vector","","Rotate a vector using this rotation.",29,null],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",30,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",31,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Transform","","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",null,null],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",32,{"inputs":[],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",32,null],[10,"transform_vector","","Transform a vector using this transform.",32,null],[10,"transform_point","","Transform a point using this transform.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"concat_self","","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Transform2","","",null,null],[8,"Transform3","","",null,null],[11,"as_ptr","","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"distance","","The distance between two values.",23,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[11,"midpoint","","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[11,"as_ptr","","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[11,"identity","","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[11,"is_invertible","","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"turn_div_2","","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"csc","","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[11,"clone","cgmath","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"new","","Create a new matrix, providing values for each index.",2,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_cols","","Create a new matrix, providing columns.",2,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",2,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_angle","","",2,{"inputs":[{"name":"a"}],"output":{"name":"matrix2"}}],[11,"new","","Create a new matrix, providing values for each index.",3,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_cols","","Create a new matrix, providing columns.",3,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"look_at","","Create a rotation matrix that will cause a vector to point at `dir`, using `up` for orientation.",3,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_angle_x","","Create a rotation matrix from a rotation around the `x` axis (pitch).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_angle_y","","Create a rotation matrix from a rotation around the `y` axis (yaw).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_angle_z","","Create a rotation matrix from a rotation around the `z` axis (roll).",3,{"inputs":[{"name":"a"}],"output":{"name":"matrix3"}}],[11,"from_axis_angle","","Create a rotation matrix from an angle around an arbitrary axis.",3,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"matrix3"}}],[11,"new","","Create a new matrix, providing values for each index.",4,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_cols","","Create a new matrix, providing columns.",4,{"inputs":[{"name":"vector4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"from_translation","","Create a homogeneous transformation matrix from a translation vector.",4,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"from_scale","","Create a homogeneous transformation matrix from a scale value.",4,{"inputs":[{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_nonuniform_scale","","Create a homogeneous transformation matrix from a set of scale values.",4,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"look_at","","Create a homogeneous transformation matrix that will cause a vector to point at `dir`, using `up` for orientation.",4,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"from_angle_x","","Create a homogeneous transformation matrix from a rotation around the `x` axis (pitch).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_angle_y","","Create a homogeneous transformation matrix from a rotation around the `y` axis (yaw).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_angle_z","","Create a homogeneous transformation matrix from a rotation around the `z` axis (roll).",4,{"inputs":[{"name":"a"}],"output":{"name":"matrix4"}}],[11,"from_axis_angle","","Create a homogeneous transformation matrix from an angle around an arbitrary axis.",4,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"matrix4"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"matrix2"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"is_zero","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"matrix2"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"row","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"swap_rows","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",2,null],[11,"transpose","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"from_value","","",2,{"inputs":[{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_diagonal","","",2,{"inputs":[{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"transpose_self","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"swap_rows","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",3,null],[11,"transpose","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"from_value","","",3,{"inputs":[{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_diagonal","","",3,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"transpose_self","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",3,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"row","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"swap_rows","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_columns","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elements","","",4,null],[11,"transpose","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"from_value","","",4,{"inputs":[{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_diagonal","","",4,{"inputs":[{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"transpose_self","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"determinant","","",4,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"diagonal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"invert","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_diagonal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",2,null],[11,"default_max_relative","","",2,null],[11,"default_max_ulps","","",2,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",2,null],[11,"ulps_eq","","",2,null],[11,"default_epsilon","","",3,null],[11,"default_max_relative","","",3,null],[11,"default_max_ulps","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",3,null],[11,"ulps_eq","","",3,null],[11,"default_epsilon","","",4,null],[11,"default_max_relative","","",4,null],[11,"default_max_ulps","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",4,null],[11,"ulps_eq","","",4,null],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"look_at","","",3,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"vector2"}],"output":{"name":"matrix3"}}],[11,"transform_vector","","",3,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"transform_point","","",3,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"concat","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"inverse_transform","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"matrix3"}}],[11,"look_at","","",3,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"transform_vector","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",3,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"inverse_transform","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"matrix4"}}],[11,"look_at","","",4,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"transform_vector","","",4,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",4,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"inverse_transform","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"sum","","",2,{"inputs":[{"name":"i"}],"output":{"name":"matrix2"}}],[11,"sum","","",2,{"inputs":[{"name":"i"}],"output":{"name":"matrix2"}}],[11,"product","","",2,{"inputs":[{"name":"i"}],"output":{"name":"matrix2"}}],[11,"product","","",2,{"inputs":[{"name":"i"}],"output":{"name":"matrix2"}}],[11,"cast","","Component-wise casting to another type",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"mul_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add_assign","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"sub_assign","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"sum","","",3,{"inputs":[{"name":"i"}],"output":{"name":"matrix3"}}],[11,"sum","","",3,{"inputs":[{"name":"i"}],"output":{"name":"matrix3"}}],[11,"product","","",3,{"inputs":[{"name":"i"}],"output":{"name":"matrix3"}}],[11,"product","","",3,{"inputs":[{"name":"i"}],"output":{"name":"matrix3"}}],[11,"cast","","Component-wise casting to another type",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"rem","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"sub_assign","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"sum","","",4,{"inputs":[{"name":"i"}],"output":{"name":"matrix4"}}],[11,"sum","","",4,{"inputs":[{"name":"i"}],"output":{"name":"matrix4"}}],[11,"product","","",4,{"inputs":[{"name":"i"}],"output":{"name":"matrix4"}}],[11,"product","","",4,{"inputs":[{"name":"i"}],"output":{"name":"matrix4"}}],[11,"cast","","Component-wise casting to another type",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"from","","",3,{"inputs":[{"name":"euler"}],"output":{"name":"matrix3"}}],[11,"from","","",4,{"inputs":[{"name":"euler"}],"output":{"name":"matrix4"}}],[11,"into","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"from","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"into","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"from","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"into","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 3-dimensional identity matrix.",3,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix3"}}],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix4"}}],[11,"from","","Clone the elements of a 3-dimensional matrix into the top-left corner of a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix4"}}],[11,"from","","Convert the matrix to a quaternion",5,{"inputs":[{"name":"matrix3"}],"output":{"name":"quaternion"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"matrix2"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"matrix3"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"matrix4"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"new","","Construct a new quaternion from one scalar component and three imaginary components.",5,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"from_sv","","Construct a new quaternion from a scalar and a vector.",5,{"inputs":[{"name":"s"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"from_arc","","Construct a new quaternion as a closest arc between two vectors",5,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"option"}],"output":{"name":"quaternion"}}],[11,"conjugate","","The conjugate of the quaternion.",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",5,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"slerp","","Spherical Linear Intoperlation",5,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"quaternion"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"quaternion"}}],[11,"sum","","",5,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"sum","","",5,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"product","","",5,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"product","","",5,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"distance2","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"cast","","Component-wise casting to another type.",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"dot","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"s"}}],[11,"from","","",5,{"inputs":[{"name":"euler"}],"output":{"name":"quaternion"}}],[11,"neg","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"rem_assign","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"default_epsilon","","",5,null],[11,"default_max_relative","","",5,null],[11,"default_max_ulps","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",5,null],[11,"ulps_eq","","",5,null],[11,"from","","Convert the quaternion to a 3 x 3 rotation matrix.",3,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix3"}}],[11,"from","","Convert the quaternion to a 4 x 4 rotation matrix.",4,{"inputs":[{"name":"quaternion"}],"output":{"name":"matrix4"}}],[11,"from","","",33,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"look_at","","",5,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"between_vectors","","",5,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"rotate_vector","","",5,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"invert","","",5,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"from_axis_angle","","",5,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"quaternion"}}],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"quaternion"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"hash","","",6,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"hash","","",7,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"hash","","",8,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"hash","","",9,null],[11,"new","","Construct a new vector, using the provided values.",6,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[11,"cast","","Component-wise casting to another type.",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"distance2","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",6,{"inputs":[{"name":"s"}],"output":{"name":"vector1"}}],[11,"sum","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"vector1"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",6,{"inputs":[{"name":"i"}],"output":{"name":"vector1"}}],[11,"sum","","",6,{"inputs":[{"name":"i"}],"output":{"name":"vector1"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"default_epsilon","","",6,null],[11,"default_max_relative","","",6,null],[11,"default_max_ulps","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",6,null],[11,"ulps_eq","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"vector1"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"mul_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"div_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"rem_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"mul_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"div_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"rem_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"add_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"sub_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"mul_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"div_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"rem_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector1"}}],[11,"add_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"new","","Construct a new vector, using the provided values.",7,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"cast","","Component-wise casting to another type.",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"distance2","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",7,{"inputs":[{"name":"s"}],"output":{"name":"vector2"}}],[11,"sum","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vector2"}}],[11,"sum","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vector2"}}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"default_epsilon","","",7,null],[11,"default_max_relative","","",7,null],[11,"default_max_ulps","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",7,null],[11,"ulps_eq","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"vector2"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_assign","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"mul_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"div_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"rem_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"add_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"sub_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"new","","Construct a new vector, using the provided values.",8,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"cast","","Component-wise casting to another type.",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"distance2","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",8,{"inputs":[{"name":"s"}],"output":{"name":"vector3"}}],[11,"sum","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",8,{"inputs":[{"name":"i"}],"output":{"name":"vector3"}}],[11,"sum","","",8,{"inputs":[{"name":"i"}],"output":{"name":"vector3"}}],[11,"neg","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"default_epsilon","","",8,null],[11,"default_max_relative","","",8,null],[11,"default_max_ulps","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",8,null],[11,"ulps_eq","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"vector3"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_assign","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_assign","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_assign","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"mul_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"div_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"rem_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"add_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"sub_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"new","","Construct a new vector, using the provided values.",9,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"cast","","Component-wise casting to another type.",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"distance2","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"from_value","","",9,{"inputs":[{"name":"s"}],"output":{"name":"vector4"}}],[11,"sum","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",9,{"inputs":[{"name":"i"}],"output":{"name":"vector4"}}],[11,"sum","","",9,{"inputs":[{"name":"i"}],"output":{"name":"vector4"}}],[11,"neg","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"default_epsilon","","",9,null],[11,"default_max_relative","","",9,null],[11,"default_max_ulps","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",9,null],[11,"ulps_eq","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"vector4"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_assign","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"add_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"mul_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"div_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"rem_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"add_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"sub_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"sub_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"mul_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign_element_wise","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"into","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"into","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"unit_x","","A unit vector in the `x` direction.",6,{"inputs":[],"output":{"name":"vector1"}}],[11,"unit_x","","A unit vector in the `x` direction.",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"unit_y","","A unit vector in the `y` direction.",7,{"inputs":[],"output":{"name":"vector2"}}],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the provided `z`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"unit_x","","A unit vector in the `x` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"unit_y","","A unit vector in the `y` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"unit_z","","A unit vector in the `w` direction.",8,{"inputs":[],"output":{"name":"vector3"}}],[11,"cross","","Returns the cross product of the vector and `other`.",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the provided `w`.",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",8,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"unit_x","","A unit vector in the `x` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_y","","A unit vector in the `y` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_z","","A unit vector in the `z` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"unit_w","","A unit vector in the `w` direction.",9,{"inputs":[],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",9,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"truncate_n","","Create a `Vector3`, dropping the nth element.",9,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"vector3"}}],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"s"}}],[11,"dot","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"angle","","",7,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"rad"}}],[11,"dot","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"angle","","",8,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"rad"}}],[11,"dot","","",9,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"s"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rad"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"deg"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"rad"}],"output":{"name":"deg"}}],[11,"from","","",11,{"inputs":[{"name":"deg"}],"output":{"name":"rad"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"rad"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",11,{"inputs":[{"name":"i"}],"output":{"name":"rad"}}],[11,"sum","","",11,{"inputs":[{"name":"i"}],"output":{"name":"rad"}}],[11,"full_turn","","",11,{"inputs":[],"output":{"name":"rad"}}],[11,"sin","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cos","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"tan","","",11,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sin_cos","","",11,null],[11,"asin","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"acos","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"atan","","",11,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[11,"atan2","","",11,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"rad"}}],[11,"neg","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rad"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"s"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"s"}}],[11,"rem","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"rem","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":{"name":"rad"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"rem_assign","","",11,{"inputs":[{"name":"self"},{"name":"rad"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"rad"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"rad"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"default_epsilon","","",11,null],[11,"default_max_relative","","",11,null],[11,"default_max_ulps","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",11,null],[11,"ulps_eq","","",11,null],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"rad"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"deg"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","","",10,{"inputs":[{"name":"i"}],"output":{"name":"deg"}}],[11,"sum","","",10,{"inputs":[{"name":"i"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[],"output":{"name":"deg"}}],[11,"sin","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cos","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"tan","","",10,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sin_cos","","",10,null],[11,"asin","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"acos","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"atan","","",10,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[11,"atan2","","",10,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"deg"}}],[11,"neg","","",10,{"inputs":[{"name":"self"}],"output":{"name":"deg"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"s"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"s"}}],[11,"rem","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"rem","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":{"name":"deg"}}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"sub_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"rem_assign","","",10,{"inputs":[{"name":"self"},{"name":"deg"}],"output":null}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"deg"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"deg"}}],[11,"mul_assign","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"default_epsilon","","",10,null],[11,"default_max_relative","","",10,null],[11,"default_max_ulps","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",10,null],[11,"ulps_eq","","",10,null],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"deg"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"euler"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"euler"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"euler"}],"output":{"name":"bool"}}],[11,"new","","Construct a set of euler angles.",12,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"euler"}}],[11,"from","","",12,{"inputs":[{"name":"quaternion"}],"output":{"name":"euler"}}],[11,"default_epsilon","","",12,null],[11,"default_max_relative","","",12,null],[11,"default_max_ulps","","",12,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",12,null],[11,"ulps_eq","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"euler"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"hash","","",13,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"hash","","",14,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"hash","","",15,null],[11,"new","","",13,{"inputs":[{"name":"s"}],"output":{"name":"point1"}}],[11,"new","","",14,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"point2"}}],[11,"new","","",15,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"point3"}}],[11,"from_homogeneous","","",15,{"inputs":[{"name":"vector4"}],"output":{"name":"point3"}}],[11,"to_homogeneous","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"from_value","","",13,{"inputs":[{"name":"s"}],"output":{"name":"point1"}}],[11,"sum","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",13,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cast","","Component-wise casting to another type",13,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"distance2","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",13,{"inputs":[],"output":{"name":"point1"}}],[11,"from_vec","","",13,{"inputs":[{"name":"vector1"}],"output":{"name":"point1"}}],[11,"to_vec","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"dot","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"s"}}],[11,"default_epsilon","","",13,null],[11,"default_max_relative","","",13,null],[11,"default_max_ulps","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",13,null],[11,"ulps_eq","","",13,null],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"add_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"vector1"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"vector1"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"rem","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point1"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"from_value","","",14,{"inputs":[{"name":"s"}],"output":{"name":"point2"}}],[11,"sum","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",14,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cast","","Component-wise casting to another type",14,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"distance2","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",14,{"inputs":[],"output":{"name":"point2"}}],[11,"from_vec","","",14,{"inputs":[{"name":"vector2"}],"output":{"name":"point2"}}],[11,"to_vec","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"dot","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"default_epsilon","","",14,null],[11,"default_max_relative","","",14,null],[11,"default_max_ulps","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",14,null],[11,"ulps_eq","","",14,null],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"add_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"rem","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point2"}}],[11,"mul_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"from_value","","",15,{"inputs":[{"name":"s"}],"output":{"name":"point3"}}],[11,"sum","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","",15,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"cast","","Component-wise casting to another type",15,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"distance2","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"s"}}],[11,"origin","","",15,{"inputs":[],"output":{"name":"point3"}}],[11,"from_vec","","",15,{"inputs":[{"name":"vector3"}],"output":{"name":"point3"}}],[11,"to_vec","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"dot","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"default_epsilon","","",15,null],[11,"default_max_relative","","",15,null],[11,"default_max_ulps","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",15,null],[11,"ulps_eq","","",15,null],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"add_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"rem","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"point3"}}],[11,"mul_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"div_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"rem_assign","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"index","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"into","","",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"into","","",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"into","","",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"into","","",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"eq","cgmath","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basis2"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"from","","",2,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"product","","",34,{"inputs":[{"name":"i"}],"output":{"name":"basis2"}}],[11,"product","","",34,{"inputs":[{"name":"i"}],"output":{"name":"basis2"}}],[11,"look_at","","",34,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"between_vectors","","",34,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"rotate_vector","","",34,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"invert","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basis2"}}],[11,"one","","",34,{"inputs":[],"output":{"name":"basis2"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"default_epsilon","","",34,null],[11,"default_max_relative","","",34,null],[11,"default_max_ulps","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",34,null],[11,"ulps_eq","","",34,null],[11,"from_angle","","",34,{"inputs":[{"name":"a"}],"output":{"name":"basis2"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basis3"}}],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",33,{"inputs":[{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"from","","",3,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"from","","",5,{"inputs":[{"name":"basis3"}],"output":{"name":"quaternion"}}],[11,"product","","",33,{"inputs":[{"name":"i"}],"output":{"name":"basis3"}}],[11,"product","","",33,{"inputs":[{"name":"i"}],"output":{"name":"basis3"}}],[11,"look_at","","",33,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"between_vectors","","",33,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"rotate_vector","","",33,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"invert","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basis3"}}],[11,"one","","",33,{"inputs":[],"output":{"name":"basis3"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"default_epsilon","","",33,null],[11,"default_max_relative","","",33,null],[11,"default_max_ulps","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",33,null],[11,"ulps_eq","","",33,null],[11,"from_axis_angle","","",33,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_x","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_y","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from_angle_z","","",33,{"inputs":[{"name":"a"}],"output":{"name":"basis3"}}],[11,"from","","Create a three-dimensional rotation matrix from a set of euler angles.",33,{"inputs":[{"name":"euler"}],"output":{"name":"basis3"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"concat_self","cgmath::prelude","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"clone","cgmath","",16,{"inputs":[{"name":"self"}],"output":{"name":"decomposed"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"one","","",16,{"inputs":[],"output":{"name":"decomposed"}}],[11,"look_at","","",16,null],[11,"transform_vector","","",16,null],[11,"transform_point","","",16,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"concat","","",16,{"inputs":[{"name":"self"},{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"inverse_transform","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix3"}}],[11,"from","","",4,{"inputs":[{"name":"decomposed"}],"output":{"name":"matrix4"}}],[11,"default_epsilon","","",16,{"inputs":[],"output":{"name":"e"}}],[11,"default_max_relative","","",16,{"inputs":[],"output":{"name":"e"}}],[11,"default_max_ulps","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"e"},{"name":"e"}],"output":{"name":"bool"}}],[11,"ulps_eq","","",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"e"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"perspectivefov"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"to_perspective","","",17,{"inputs":[{"name":"self"}],"output":{"name":"perspective"}}],[11,"from","","",4,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"perspective"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"perspective"}],"output":{"name":"matrix4"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ortho"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"ortho"}],"output":{"name":"matrix4"}}],[8,"BaseNum","","Base numeric types with partial ordering",null,null],[8,"BaseFloat","","Base floating point types",null,null],[8,"Array","","An array containing elements of type `Element`",null,null],[16,"Element","","",20,null],[10,"from_value","","Construct a vector from a single value, replicating it.",20,null],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",20,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",20,null],[11,"swap_elements","","Swap the elements at indices `i` and `j` in-place.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"sum","cgmath","The sum of the elements of the array.",20,null],[10,"product","","The product of the elements of the array.",20,null],[8,"ElementWise","","Element-wise arithmetic operations. These are supplied for pragmatic reasons, but will usually fall outside of traditional algebraic properties.",null,null],[10,"add_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"sub_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"mul_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"div_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"rem_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"self"}}],[10,"add_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"sub_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"mul_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_assign_element_wise","","",21,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"VectorSpace","","Vectors that can be added together and multiplied by scalars.",null,null],[16,"Scalar","","The associated scalar.",22,null],[8,"MetricSpace","","A type with a distance function between values.",null,null],[16,"Metric","","The metric to be returned by the `distance` function.",23,null],[10,"distance2","","Returns the squared distance.",23,null],[11,"distance","cgmath::prelude","The distance between two values.",23,null],[8,"InnerSpace","cgmath","Vectors that also have a dot (or inner) product.",null,null],[10,"dot","","Vector dot (or inner) product.",24,null],[11,"is_perpendicular","cgmath::prelude","Returns `true` if the vector is perpendicular (at right angles) to the other vector.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"magnitude2","","Returns the squared magnitude.",24,null],[11,"magnitude","","The distance from the tail to the tip of the vector.",24,null],[11,"angle","","Returns the angle between two vectors in radians.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a magnitude of `1`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given magnitude.",24,null],[11,"lerp","","Returns the result of linearly interpolating the magnitude of the vector towards the magnitude of `other` by the specified amount.",24,null],[8,"EuclideanSpace","cgmath","Points in a Euclidean space with an associated space of displacement vectors.",null,null],[16,"Scalar","","The associated scalar over which the space is defined.",25,null],[16,"Diff","","The associated space of displacement vectors.",25,null],[10,"origin","","The point at the origin of the Euclidean space.",25,{"inputs":[],"output":{"name":"self"}}],[10,"from_vec","","Convert a displacement vector to a point.",25,null],[10,"to_vec","","Convert a point to a displacement vector.",25,null],[11,"midpoint","cgmath::prelude","Returns the middle point between two other points.",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"centroid","","Returns the average position of all points in the slice.",25,null],[10,"dot","cgmath","This is a weird one, but its useful for plane calculations.",25,null],[8,"Matrix","","A column-major matrix of arbitrary dimensions.",null,null],[16,"Row","","The row vector of the matrix.",26,null],[16,"Column","","The column vector of the matrix.",26,null],[16,"Transpose","","The result of transposing the matrix",26,null],[11,"as_ptr","cgmath::prelude","Get the pointer to the first element of the array.",26,null],[11,"as_mut_ptr","","Get a mutable pointer to the first element of the array.",26,null],[11,"replace_col","","Replace a column in the array.",26,null],[10,"row","cgmath","Get a row from this matrix by-value.",26,null],[10,"swap_rows","","Swap two rows of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_columns","","Swap two columns of this array.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"swap_elements","","Swap the values at index `a` and `b`",26,null],[10,"transpose","","Transpose this matrix, returning a new matrix.",26,null],[8,"SquareMatrix","","A column-major major matrix where the rows and column vectors are of the same dimensions.",null,null],[16,"ColumnRow","","The row/column vector of the matrix.",27,null],[10,"from_value","","Create a new diagonal matrix using the supplied value.",27,null],[10,"from_diagonal","","Create a matrix from a non-uniform scale",27,null],[11,"identity","cgmath::prelude","The [identity matrix]. Multiplying this matrix with another should have no effect.",27,{"inputs":[],"output":{"name":"self"}}],[10,"transpose_self","cgmath","Transpose this matrix in-place.",27,{"inputs":[{"name":"self"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",27,null],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",27,null],[11,"trace","cgmath::prelude","Return the trace of this matrix. That is, the sum of the diagonal.",27,null],[10,"invert","cgmath","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is the identity matrix. Returns `None` if this matrix is not invertible (has a determinant of zero).",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_invertible","cgmath::prelude","Test if this matrix is invertible.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal and every element in the diagonal is one.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_diagonal","cgmath","Test if this is a diagonal matrix. That is, every element outside of the diagonal is 0.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its transpose.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Angle","","Angles and their associated trigonometric functions.",null,null],[16,"Unitless","","",28,null],[11,"normalize","cgmath::prelude","Return the angle, normalized to the range `[0, full_turn)`.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Return the angle rotated by half a turn.",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles.",28,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","cgmath","A full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_2","cgmath::prelude","Half of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_3","","A third of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_4","","A quarter of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[11,"turn_div_6","","A sixth of a full rotation.",28,{"inputs":[],"output":{"name":"self"}}],[10,"sin","cgmath","Compute the sine of the angle, returning a unitless ratio.",28,null],[10,"cos","","Compute the cosine of the angle, returning a unitless ratio.",28,null],[10,"tan","","Compute the tangent of the angle, returning a unitless ratio.",28,null],[10,"sin_cos","","Compute the sine and cosine of the angle, returning the result as a pair.",28,null],[11,"csc","cgmath::prelude","Compute the cosecant of the angle.",28,null],[11,"cot","","Compute the cotangent of the angle.",28,null],[11,"sec","","Compute the secant of the angle.",28,null],[10,"asin","cgmath","Compute the arcsine of the ratio, returning the resulting angle.",28,null],[10,"acos","","Compute the arccosine of the ratio, returning the resulting angle.",28,null],[10,"atan","","Compute the arctangent of the ratio, returning the resulting angle.",28,null],[10,"atan2","","",28,null],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that creates a circular motion, and preserves at least one point in the space.",null,null],[10,"look_at","","Create a rotation to a given direction with an 'up' vector.",29,null],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'. Both given vectors are assumed to have unit length.",29,null],[10,"rotate_vector","","Rotate a vector using this rotation.",29,null],[11,"rotate_point","cgmath::prelude","Rotate a point using this rotation, by converting it to its representation as a vector.",29,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"invert","cgmath","Create a new rotation which \"un-does\" this rotation. That is, `r * r.invert()` is the identity.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both from_axis_angle() and from_euler() for 2D space.",30,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",31,{"inputs":[{"name":"vector3"},{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_x","cgmath::prelude","Create a rotation from an angle around the `x` axis (pitch).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",31,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"Transform","cgmath","A trait representing an affine transformation that can be applied to points or vectors. An affine transformation is one which",null,null],[10,"one","","Create an identity transformation. That is, a transformation which does nothing.",32,{"inputs":[],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from `eye`, using `up` for orientation.",32,null],[10,"transform_vector","","Transform a vector using this transform.",32,null],[10,"transform_point","","Transform a point using this transform.",32,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"concat","","Combine this transform with another, yielding a new transformation which has the effects of both.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"inverse_transform","","Create a transform that \"un-does\" this one.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"concat_self","cgmath::prelude","Combine this transform with another, in-place.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Transform2","cgmath","",null,null],[8,"Transform3","","",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_ulps_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_relative_eq","","",null,null],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"assert_relative_ne","","",null,null],[14,"assert_ulps_eq","","",null,null]],"paths":[[8,"One"],[8,"Zero"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Deg"],[3,"Rad"],[3,"Euler"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Decomposed"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[8,"Array"],[8,"ElementWise"],[8,"VectorSpace"],[8,"MetricSpace"],[8,"InnerSpace"],[8,"EuclideanSpace"],[8,"Matrix"],[8,"SquareMatrix"],[8,"Angle"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"Transform"],[3,"Basis3"],[3,"Basis2"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",30,null],[12,"aio_offset","","",30,null],[12,"aio_buf","","",30,null],[12,"aio_nbytes","","",30,null],[12,"aio_reqprio","","",30,null],[12,"aio_sigevent","","",30,null],[12,"aio_lio_opcode","","",30,null],[3,"utmpx","","",null,null],[12,"ut_user","","",31,null],[12,"ut_id","","",31,null],[12,"ut_line","","",31,null],[12,"ut_pid","","",31,null],[12,"ut_type","","",31,null],[12,"ut_tv","","",31,null],[12,"ut_host","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_pathv","","",32,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",33,null],[12,"ss_family","","",33,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",34,null],[12,"ai_family","","",34,null],[12,"ai_socktype","","",34,null],[12,"ai_protocol","","",34,null],[12,"ai_addrlen","","",34,null],[12,"ai_canonname","","",34,null],[12,"ai_addr","","",34,null],[12,"ai_next","","",34,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",35,null],[12,"denom","","",35,null],[3,"stat","","",null,null],[12,"st_dev","","",36,null],[12,"st_mode","","",36,null],[12,"st_nlink","","",36,null],[12,"st_ino","","",36,null],[12,"st_uid","","",36,null],[12,"st_gid","","",36,null],[12,"st_rdev","","",36,null],[12,"st_atime","","",36,null],[12,"st_atime_nsec","","",36,null],[12,"st_mtime","","",36,null],[12,"st_mtime_nsec","","",36,null],[12,"st_ctime","","",36,null],[12,"st_ctime_nsec","","",36,null],[12,"st_birthtime","","",36,null],[12,"st_birthtime_nsec","","",36,null],[12,"st_size","","",36,null],[12,"st_blocks","","",36,null],[12,"st_blksize","","",36,null],[12,"st_flags","","",36,null],[12,"st_gen","","",36,null],[12,"st_lspare","","",36,null],[12,"st_qspare","","",36,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_seekoff","","",37,null],[12,"d_reclen","","",37,null],[12,"d_namlen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"si_pid","","",38,null],[12,"si_uid","","",38,null],[12,"si_status","","",38,null],[12,"si_addr","","",38,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",39,null],[12,"sa_mask","","",39,null],[12,"sa_flags","","",39,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",40,null],[12,"ss_size","","",40,null],[12,"ss_flags","","",40,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",41,null],[12,"fst_posmode","","",41,null],[12,"fst_offset","","",41,null],[12,"fst_length","","",41,null],[12,"fst_bytesalloc","","",41,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",42,null],[12,"ra_count","","",42,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",43,null],[12,"f_frsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_favail","","",43,null],[12,"f_fsid","","",43,null],[12,"f_flag","","",43,null],[12,"f_namemax","","",43,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",44,null],[12,"dli_fbase","","",44,null],[12,"dli_sname","","",44,null],[12,"dli_saddr","","",44,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",45,null],[12,"sin_family","","",45,null],[12,"sin_port","","",45,null],[12,"sin_addr","","",45,null],[12,"sin_zero","","",45,null],[3,"statfs","","",null,null],[12,"f_bsize","","",46,null],[12,"f_iosize","","",46,null],[12,"f_blocks","","",46,null],[12,"f_bfree","","",46,null],[12,"f_bavail","","",46,null],[12,"f_files","","",46,null],[12,"f_ffree","","",46,null],[12,"f_fsid","","",46,null],[12,"f_owner","","",46,null],[12,"f_type","","",46,null],[12,"f_flags","","",46,null],[12,"f_fssubtype","","",46,null],[12,"f_fstypename","","",46,null],[12,"f_mntonname","","",46,null],[12,"f_mntfromname","","",46,null],[12,"f_reserved","","",46,null],[3,"kevent","","",null,null],[12,"ident","","",47,null],[12,"filter","","",47,null],[12,"flags","","",47,null],[12,"fflags","","",47,null],[12,"data","","",47,null],[12,"udata","","",47,null],[3,"kevent64_s","","",null,null],[12,"ident","","",48,null],[12,"filter","","",48,null],[12,"flags","","",48,null],[12,"fflags","","",48,null],[12,"data","","",48,null],[12,"udata","","",48,null],[12,"ext","","",48,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",49,null],[12,"dqb_bsoftlimit","","",49,null],[12,"dqb_curbytes","","",49,null],[12,"dqb_ihardlimit","","",49,null],[12,"dqb_isoftlimit","","",49,null],[12,"dqb_curinodes","","",49,null],[12,"dqb_btime","","",49,null],[12,"dqb_itime","","",49,null],[12,"dqb_id","","",49,null],[12,"dqb_spare","","",49,null],[3,"if_msghdr","","",null,null],[12,"ifm_msglen","","",50,null],[12,"ifm_version","","",50,null],[12,"ifm_type","","",50,null],[12,"ifm_addrs","","",50,null],[12,"ifm_flags","","",50,null],[12,"ifm_index","","",50,null],[12,"ifm_data","","",50,null],[3,"termios","","",null,null],[12,"c_iflag","","",51,null],[12,"c_oflag","","",51,null],[12,"c_cflag","","",51,null],[12,"c_lflag","","",51,null],[12,"c_cc","","",51,null],[12,"c_ispeed","","",51,null],[12,"c_ospeed","","",51,null],[3,"flock","","",null,null],[12,"l_start","","",52,null],[12,"l_len","","",52,null],[12,"l_pid","","",52,null],[12,"l_type","","",52,null],[12,"l_whence","","",52,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",53,null],[12,"hdr_cnt","","",53,null],[12,"trailers","","",53,null],[12,"trl_cnt","","",53,null],[3,"lconv","","",null,null],[12,"decimal_point","","",54,null],[12,"thousands_sep","","",54,null],[12,"grouping","","",54,null],[12,"int_curr_symbol","","",54,null],[12,"currency_symbol","","",54,null],[12,"mon_decimal_point","","",54,null],[12,"mon_thousands_sep","","",54,null],[12,"mon_grouping","","",54,null],[12,"positive_sign","","",54,null],[12,"negative_sign","","",54,null],[12,"int_frac_digits","","",54,null],[12,"frac_digits","","",54,null],[12,"p_cs_precedes","","",54,null],[12,"p_sep_by_space","","",54,null],[12,"n_cs_precedes","","",54,null],[12,"n_sep_by_space","","",54,null],[12,"p_sign_posn","","",54,null],[12,"n_sign_posn","","",54,null],[12,"int_p_cs_precedes","","",54,null],[12,"int_n_cs_precedes","","",54,null],[12,"int_p_sep_by_space","","",54,null],[12,"int_n_sep_by_space","","",54,null],[12,"int_p_sign_posn","","",54,null],[12,"int_n_sign_posn","","",54,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",55,null],[12,"sigev_signo","","",55,null],[12,"sigev_value","","",55,null],[12,"sigev_notify_attributes","","",55,null],[3,"proc_taskinfo","","",null,null],[12,"pti_virtual_size","","",56,null],[12,"pti_resident_size","","",56,null],[12,"pti_total_user","","",56,null],[12,"pti_total_system","","",56,null],[12,"pti_threads_user","","",56,null],[12,"pti_threads_system","","",56,null],[12,"pti_policy","","",56,null],[12,"pti_faults","","",56,null],[12,"pti_pageins","","",56,null],[12,"pti_cow_faults","","",56,null],[12,"pti_messages_sent","","",56,null],[12,"pti_messages_received","","",56,null],[12,"pti_syscalls_mach","","",56,null],[12,"pti_syscalls_unix","","",56,null],[12,"pti_csw","","",56,null],[12,"pti_threadnum","","",56,null],[12,"pti_numrunning","","",56,null],[12,"pti_priority","","",56,null],[3,"proc_bsdinfo","","",null,null],[12,"pbi_flags","","",57,null],[12,"pbi_status","","",57,null],[12,"pbi_xstatus","","",57,null],[12,"pbi_pid","","",57,null],[12,"pbi_ppid","","",57,null],[12,"pbi_uid","","",57,null],[12,"pbi_gid","","",57,null],[12,"pbi_ruid","","",57,null],[12,"pbi_rgid","","",57,null],[12,"pbi_svuid","","",57,null],[12,"pbi_svgid","","",57,null],[12,"rfu_1","","",57,null],[12,"pbi_comm","","",57,null],[12,"pbi_name","","",57,null],[12,"pbi_nfiles","","",57,null],[12,"pbi_pgid","","",57,null],[12,"pbi_pjobc","","",57,null],[12,"e_tdev","","",57,null],[12,"e_tpgid","","",57,null],[12,"pbi_nice","","",57,null],[12,"pbi_start_tvsec","","",57,null],[12,"pbi_start_tvusec","","",57,null],[3,"proc_taskallinfo","","",null,null],[12,"pbsd","","",58,null],[12,"ptinfo","","",58,null],[3,"proc_threadinfo","","",null,null],[12,"pth_user_time","","",59,null],[12,"pth_system_time","","",59,null],[12,"pth_cpu_usage","","",59,null],[12,"pth_policy","","",59,null],[12,"pth_run_state","","",59,null],[12,"pth_flags","","",59,null],[12,"pth_sleep_time","","",59,null],[12,"pth_curpri","","",59,null],[12,"pth_priority","","",59,null],[12,"pth_maxpriority","","",59,null],[12,"pth_name","","",59,null],[3,"xsw_usage","","",null,null],[12,"xsu_total","","",60,null],[12,"xsu_avail","","",60,null],[12,"xsu_used","","",60,null],[12,"xsu_pagesize","","",60,null],[12,"xsu_encrypted","","",60,null],[3,"xucred","","",null,null],[12,"cr_version","","",61,null],[12,"cr_uid","","",61,null],[12,"cr_ngroups","","",61,null],[12,"cr_groups","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"timeval32","","",null,null],[12,"tv_sec","","",62,null],[12,"tv_usec","","",62,null],[3,"if_data","","",null,null],[12,"ifi_type","","",63,null],[12,"ifi_typelen","","",63,null],[12,"ifi_physical","","",63,null],[12,"ifi_addrlen","","",63,null],[12,"ifi_hdrlen","","",63,null],[12,"ifi_recvquota","","",63,null],[12,"ifi_xmitquota","","",63,null],[12,"ifi_unused1","","",63,null],[12,"ifi_mtu","","",63,null],[12,"ifi_metric","","",63,null],[12,"ifi_baudrate","","",63,null],[12,"ifi_ipackets","","",63,null],[12,"ifi_ierrors","","",63,null],[12,"ifi_opackets","","",63,null],[12,"ifi_oerrors","","",63,null],[12,"ifi_collisions","","",63,null],[12,"ifi_ibytes","","",63,null],[12,"ifi_obytes","","",63,null],[12,"ifi_imcasts","","",63,null],[12,"ifi_omcasts","","",63,null],[12,"ifi_iqdrops","","",63,null],[12,"ifi_noproto","","",63,null],[12,"ifi_recvtiming","","",63,null],[12,"ifi_xmittiming","","",63,null],[12,"ifi_lastchange","","",63,null],[12,"ifi_unused2","","",63,null],[12,"ifi_hwassist","","",63,null],[12,"ifi_reserved1","","",63,null],[12,"ifi_reserved2","","",63,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"getxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"settimeofday","","",null,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"timeval32"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"if_data"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"if_msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskinfo"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"proc_bsdinfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"proc_taskallinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"proc_threadinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xsw_usage"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"clockid_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"boolean_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"VM_FLAGS_FIXED","","",null,null],[17,"VM_FLAGS_ANYWHERE","","",null,null],[17,"VM_FLAGS_PURGABLE","","",null,null],[17,"VM_FLAGS_RANDOM_ADDR","","",null,null],[17,"VM_FLAGS_NO_CACHE","","",null,null],[17,"VM_FLAGS_RESILIENT_CODESIGN","","",null,null],[17,"VM_FLAGS_RESILIENT_MEDIA","","",null,null],[17,"VM_FLAGS_OVERWRITE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_MASK","","",null,null],[17,"VM_FLAGS_RETURN_DATA_ADDR","","",null,null],[17,"VM_FLAGS_RETURN_4K_DATA_ADDR","","",null,null],[17,"VM_FLAGS_ALIAS_MASK","","",null,null],[17,"VM_FLAGS_USER_ALLOCATE","","",null,null],[17,"VM_FLAGS_USER_MAP","","",null,null],[17,"VM_FLAGS_USER_REMAP","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SHIFT","","",null,null],[17,"SUPERPAGE_NONE","","",null,null],[17,"SUPERPAGE_SIZE_ANY","","",null,null],[17,"VM_FLAGS_SUPERPAGE_NONE","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_ANY","","",null,null],[17,"SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_FLAGS_SUPERPAGE_SIZE_2MB","","",null,null],[17,"VM_MEMORY_MALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_SMALL","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE","","",null,null],[17,"VM_MEMORY_MALLOC_HUGE","","",null,null],[17,"VM_MEMORY_SBRK","","",null,null],[17,"VM_MEMORY_REALLOC","","",null,null],[17,"VM_MEMORY_MALLOC_TINY","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSABLE","","",null,null],[17,"VM_MEMORY_MALLOC_LARGE_REUSED","","",null,null],[17,"VM_MEMORY_ANALYSIS_TOOL","","",null,null],[17,"VM_MEMORY_MALLOC_NANO","","",null,null],[17,"VM_MEMORY_MACH_MSG","","",null,null],[17,"VM_MEMORY_IOKIT","","",null,null],[17,"VM_MEMORY_STACK","","",null,null],[17,"VM_MEMORY_GUARD","","",null,null],[17,"VM_MEMORY_SHARED_PMAP","","",null,null],[17,"VM_MEMORY_DYLIB","","",null,null],[17,"VM_MEMORY_OBJC_DISPATCHERS","","",null,null],[17,"VM_MEMORY_UNSHARED_PMAP","","",null,null],[17,"VM_MEMORY_APPKIT","","",null,null],[17,"VM_MEMORY_FOUNDATION","","",null,null],[17,"VM_MEMORY_COREGRAPHICS","","",null,null],[17,"VM_MEMORY_CORESERVICES","","",null,null],[17,"VM_MEMORY_CARBON","","",null,null],[17,"VM_MEMORY_JAVA","","",null,null],[17,"VM_MEMORY_COREDATA","","",null,null],[17,"VM_MEMORY_COREDATA_OBJECTIDS","","",null,null],[17,"VM_MEMORY_ATS","","",null,null],[17,"VM_MEMORY_LAYERKIT","","",null,null],[17,"VM_MEMORY_CGIMAGE","","",null,null],[17,"VM_MEMORY_TCMALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_DATA","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_SHARED","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_BACKINGSTORES","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_XALLOC","","",null,null],[17,"VM_MEMORY_COREGRAPHICS_MISC","","",null,null],[17,"VM_MEMORY_DYLD","","",null,null],[17,"VM_MEMORY_DYLD_MALLOC","","",null,null],[17,"VM_MEMORY_SQLITE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_CORE","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","","",null,null],[17,"VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","","",null,null],[17,"VM_MEMORY_GLSL","","",null,null],[17,"VM_MEMORY_OPENCL","","",null,null],[17,"VM_MEMORY_COREIMAGE","","",null,null],[17,"VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","","",null,null],[17,"VM_MEMORY_IMAGEIO","","",null,null],[17,"VM_MEMORY_COREPROFILE","","",null,null],[17,"VM_MEMORY_ASSETSD","","",null,null],[17,"VM_MEMORY_OS_ALLOC_ONCE","","",null,null],[17,"VM_MEMORY_LIBDISPATCH","","",null,null],[17,"VM_MEMORY_ACCELERATE","","",null,null],[17,"VM_MEMORY_COREUI","","",null,null],[17,"VM_MEMORY_COREUIFILE","","",null,null],[17,"VM_MEMORY_GENEALOGY","","",null,null],[17,"VM_MEMORY_RAWCAMERA","","",null,null],[17,"VM_MEMORY_CORPSEINFO","","",null,null],[17,"VM_MEMORY_ASL","","",null,null],[17,"VM_MEMORY_SWIFT_RUNTIME","","",null,null],[17,"VM_MEMORY_SWIFT_METADATA","","",null,null],[17,"VM_MEMORY_DHMM","","",null,null],[17,"VM_MEMORY_SCENEKIT","","",null,null],[17,"VM_MEMORY_SKYWALK","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_1","","",null,null],[17,"VM_MEMORY_APPLICATION_SPECIFIC_16","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway^2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_SYS_CONTROL","","",null,null],[17,"SYSPROTO_EVENT","","",null,null],[17,"SYSPROTO_CONTROL","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_LOCAL","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_PEERPID","","",null,null],[17,"LOCAL_PEEREPID","","",null,null],[17,"LOCAL_PEERUUID","","",null,null],[17,"LOCAL_PEEREUUID","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TIMESTAMP_MONOTONIC","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_REUSESHAREUID","","",null,null],[17,"SO_NOTIFYCONFLICT","","",null,null],[17,"SO_RANDOMPORT","","",null,null],[17,"SO_NP_EXTENSIONS","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"NLDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"OFDEL","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"XATTR_NOFOLLOW","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"XATTR_NOSECURITY","","",null,null],[17,"XATTR_NODEFAULT","","",null,null],[17,"XATTR_SHOWCOMPRESSION","","",null,null],[17,"NET_RT_IFLIST2","","",null,null],[17,"RTM_IFINFO2","","",null,null],[17,"KERN_PROCARGS2","","",null,null],[17,"PROC_PIDTASKALLINFO","","",null,null],[17,"PROC_PIDTASKINFO","","",null,null],[17,"PROC_PIDTHREADINFO","","",null,null],[17,"MAXCOMLEN","","",null,null],[17,"MAXTHREADNAMESIZE","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"proc_threadinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
initSearch(searchIndex);
